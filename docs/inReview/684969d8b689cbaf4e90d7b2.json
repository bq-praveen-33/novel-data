{
  "online_content": {
    "type": "doc",
    "content": [
      {
        "type": "heading",
        "attrs": {
          "level": 1
        },
        "content": [
          {
            "type": "text",
            "text": "üìä Graph Algorithms in C++: A Beginner-Friendly Guide"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "Graphs are fundamental data structures used to model pairwise relationships between objects. Common in computer science, graphs appear in social networks, maps, recommendation systems, and more."
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "In this article, we‚Äôll cover:"
          }
        ]
      },
      {
        "type": "bulletList",
        "attrs": {
          "tight": false
        },
        "content": [
          {
            "type": "listItem",
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "text": "What is a Graph?"
                  }
                ]
              }
            ]
          },
          {
            "type": "listItem",
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "text": "Types of Graphs"
                  }
                ]
              }
            ]
          },
          {
            "type": "listItem",
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "text": "Graph Representations in C++"
                  }
                ]
              }
            ]
          },
          {
            "type": "listItem",
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "text": "BFS (Breadth-First Search)"
                  }
                ]
              }
            ]
          },
          {
            "type": "listItem",
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "text": "DFS (Depth-First Search)"
                  }
                ]
              }
            ]
          },
          {
            "type": "listItem",
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "text": "Dijkstra‚Äôs Algorithm"
                  }
                ]
              }
            ]
          },
          {
            "type": "listItem",
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "text": "Topological Sort (Kahn‚Äôs Algorithm)"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type": "horizontalRule"
      },
      {
        "type": "heading",
        "attrs": {
          "level": 2
        },
        "content": [
          {
            "type": "text",
            "text": "üîó What is a Graph?"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "A "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "Graph"
          },
          {
            "type": "text",
            "text": " consists of:"
          }
        ]
      },
      {
        "type": "bulletList",
        "attrs": {
          "tight": false
        },
        "content": [
          {
            "type": "listItem",
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "text": "Vertices (nodes)"
                  },
                  {
                    "type": "text",
                    "text": ": Represent entities."
                  }
                ]
              }
            ]
          },
          {
            "type": "listItem",
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "text": "Edges"
                  },
                  {
                    "type": "text",
                    "text": ": Represent relationships or connections."
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type": "heading",
        "attrs": {
          "level": 3
        },
        "content": [
          {
            "type": "text",
            "text": "Types of Graphs:"
          }
        ]
      },
      {
        "type": "bulletList",
        "attrs": {
          "tight": false
        },
        "content": [
          {
            "type": "listItem",
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "text": "Directed vs. Undirected"
                  }
                ]
              }
            ]
          },
          {
            "type": "listItem",
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "text": "Weighted vs. Unweighted"
                  }
                ]
              }
            ]
          },
          {
            "type": "listItem",
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "text": "Cyclic vs. Acyclic"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type": "horizontalRule"
      },
      {
        "type": "heading",
        "attrs": {
          "level": 2
        },
        "content": [
          {
            "type": "text",
            "text": "üß± Graph Representation in C++"
          }
        ]
      },
      {
        "type": "heading",
        "attrs": {
          "level": 3
        },
        "content": [
          {
            "type": "text",
            "text": "üîç BFS (Breadth-First Search)"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "Uses a queue. Useful for finding shortest paths in unweighted graphs."
          }
        ]
      },
      {
        "type": "codeBlock",
        "attrs": {
          "language": null
        },
        "content": [
          {
            "type": "text",
            "text": "#include <iostream>\n#include <vector>\n#include <queue>\nusing namespace std;\n\nvoid bfs(int start, vector<int> adj[], int n) {\n    vector<bool> visited(n, false);\n    queue<int> q;\n\n    visited[start] = true;\n    q.push(start);\n\n    while (!q.empty()) {\n        int node = q.front();\n        q.pop();\n        cout << node << \" \";\n\n        for (int neighbor : adj[node]) {\n            if (!visited[neighbor]) {\n                visited[neighbor] = true;\n                q.push(neighbor);\n            }\n        }\n    }\n}\n"
          }
        ]
      },
      {
        "type": "horizontalRule"
      },
      {
        "type": "heading",
        "attrs": {
          "level": 2
        },
        "content": [
          {
            "type": "text",
            "text": "üß≠ DFS (Depth-First Search)"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "Uses recursion or a stack. Useful for exploring components."
          }
        ]
      },
      {
        "type": "codeBlock",
        "attrs": {
          "language": null
        },
        "content": [
          {
            "type": "text",
            "text": "void dfs(int node, vector<int> adj[], vector<bool>& visited) {\n    visited[node] = true;\n    cout << node << \" \";\n\n    for (int neighbor : adj[node]) {\n        if (!visited[neighbor]) {\n            dfs(neighbor, adj, visited);\n        }\n    }\n}\n"
          }
        ]
      },
      {
        "type": "paragraph"
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "void dfs(int node, vector<int> adj[], vector<bool>& visited) {     visited[node] = true;     cout << node << \" \";      for (int neighbor : adj[node]) {         if (!visited[neighbor]) {             dfs(neighbor, adj, visited);         }     } } "
          }
        ]
      },
      {
        "type": "horizontalRule"
      },
      {
        "type": "heading",
        "attrs": {
          "level": 2
        },
        "content": [
          {
            "type": "text",
            "text": "üõ£Ô∏è Dijkstra's Algorithm"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "Used to find shortest paths in "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "weighted"
          },
          {
            "type": "text",
            "text": " graphs with "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "non-negative"
          },
          {
            "type": "text",
            "text": " edges."
          }
        ]
      },
      {
        "type": "codeBlock",
        "attrs": {
          "language": null
        },
        "content": [
          {
            "type": "text",
            "text": "#include <iostream>\n#include <vector>\n#include <queue>\nusing namespace std;\n\ntypedef pair<int, int> pii;\n\nvoid dijkstra(int src, vector<pii> adj[], int n) {\n    vector<int> dist(n, 1e9);\n    priority_queue<pii, vector<pii>, greater<pii>> pq;\n\n    dist[src] = 0;\n    pq.push({0, src});\n\n    while (!pq.empty()) {\n        int u = pq.top().second;\n        int d_u = pq.top().first;\n        pq.pop();\n\n        for (auto [v, weight] : adj[u]) {\n            if (dist[v] > d_u + weight) {\n                dist[v] = d_u + weight;\n                pq.push({dist[v], v});\n            }\n        }\n    }\n\n    for (int i = 0; i < n; i++)\n        cout << \"Distance to \" << i << \": \" << dist[i] << endl;\n}\n"
          }
        ]
      },
      {
        "type": "horizontalRule"
      },
      {
        "type": "heading",
        "attrs": {
          "level": 2
        },
        "content": [
          {
            "type": "text",
            "text": "üèóÔ∏è Topological Sort (Kahn's Algorithm)"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "Applicable to "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "DAGs"
          },
          {
            "type": "text",
            "text": " (Directed Acyclic Graphs)."
          }
        ]
      },
      {
        "type": "codeBlock",
        "attrs": {
          "language": null
        },
        "content": [
          {
            "type": "text",
            "text": "cpp"
          }
        ]
      },
      {
        "type": "codeBlock",
        "attrs": {
          "language": null
        },
        "content": [
          {
            "type": "text",
            "text": "#include <iostream>\n#include <vector>\n#include <queue>\nusing namespace std;\n\nvoid topoSort(int n, vector<int> adj[]) {\n    vector<int> inDegree(n, 0);\n    for (int u = 0; u < n; u++)\n        for (int v : adj[u])\n            inDegree[v]++;\n\n    queue<int> q;\n    for (int i = 0; i < n; i++)\n        if (inDegree[i] == 0)\n            q.push(i);\n\n    while (!q.empty()) {\n        int u = q.front(); q.pop();\n        cout << u << \" \";\n\n        for (int v : adj[u]) {\n            inDegree[v]--;\n            if (inDegree[v] == 0)\n                q.push(v);\n        }\n    }\n}\n"
          }
        ]
      },
      {
        "type": "horizontalRule"
      },
      {
        "type": "heading",
        "attrs": {
          "level": 2
        },
        "content": [
          {
            "type": "text",
            "text": "üß† Summary"
          }
        ]
      },
      {
        "type": "taskList",
        "content": [
          {
            "type": "taskItem",
            "attrs": {
              "checked": true
            },
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "text": "Algorithm Use Case Time Complexity BFS Shortest path in unweighted graphs O(V + E) DFS Component traversal, cycle detection O(V + E) Dijkstra Shortest path in weighted graphs O((V + E) log V) Topological Sort DAG ordering O(V + E)"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type": "horizontalRule"
      },
      {
        "type": "heading",
        "attrs": {
          "level": 2
        }
      }
    ]
  },
  "online_content_time": "2025-06-11T11:35:16.727Z"
}