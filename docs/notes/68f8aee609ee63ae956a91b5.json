{
  "online_content": {
    "type": "doc",
    "content": [
      {
        "type": "codeBlock",
        "attrs": {
          "language": "typescriptreact"
        },
        "content": [
          {
            "type": "text",
            "text": "\"use client\";\n\nimport React, { useState, useMemo, useRef, useEffect } from \"react\";\nimport { Note, ViewCollection } from \"@/types/board\";\nimport { JSONContent } from \"novel\";\nimport RightSidebar from \"../rightSidebar\";\nimport useAddRootPage from \"@/hooks/use-addRootPage\";\nimport useBoardFunctions from \"@/hooks/use-board\";\nimport CalendarHeader from \"./calenderHeader\";\nimport { useBoard } from \"@/contexts/boardContext\";\nimport useNoteActions from \"@/hooks/use-updateNode\";\nimport CalendarCard from \"./calenderCard\";\nimport PlusIcon from \"../../ui/icons/plusIcon\";\n\ninterface CalendarViewProps {\n  board: ViewCollection;\n  notes: Note[];\n}\n\ninterface CalendarDay {\n  date: Date;\n  isCurrentMonth: boolean;\n  isToday: boolean;\n  notes: Note[];\n}\n\n// Helper function to parse date range format: \"2025-10-22 [2025-10-22 - 2025-10-25]\"\nfunction parseDateRange(value: string | undefined): { start: Date; end: Date } | null {\n  if (!value) return null;\n\n  const match = value.match(/\\[(.*?) - (.*?)\\]/);\n  if (match) {\n    const start = new Date(match[1]);\n    const end = new Date(match[2]);\n    if (!isNaN(start.getTime()) && !isNaN(end.getTime())) {\n      return { start, end };\n    }\n  }\n\n  const singleDate = new Date(value);\n  if (!isNaN(singleDate.getTime())) return { start: singleDate, end: singleDate };\n\n  return null;\n}\n\n// Helper to format date range\nfunction formatDateRange(start: Date, end: Date): string {\n  const startStr = start.toLocaleDateString(\"en-CA\");\n  const endStr = end.toLocaleDateString(\"en-CA\");\n  return `${startStr} [${startStr} - ${endStr}]`;\n}\n\nexport default function CalendarView({ board, notes }: CalendarViewProps) {\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedTask, setSelectedTask] = useState<Note | null>(null);\n  const [rightSidebarContent, setRightSidebarContent] = useState<JSONContent | null>(null);\n  const [isClosing, setIsClosing] = useState(false);\n  const previousCardIdRef = useRef<string | null>(null);\n  const { addRootPage } = useAddRootPage();\n  const [localNotes, setLocalNotes] = useState<Note[]>(notes);\n  const { UpdateNote, DeleteNote } = useNoteActions();\n  const { updateNote, updateAllNotes } = useBoard();\n  const [draggedNote, setDraggedNote] = useState<Note | null>(null);\n  const [dropTargetDate, setDropTargetDate] = useState<string | null>(null);\n\n  useEffect(() => {\n    setLocalNotes(notes);\n  }, [board, notes]);\n\n  const weekDays = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\n  const { handleCardClick, handleCloseSidebar } = useBoardFunctions({\n    board,\n    setSelectedTask,\n    setRightSidebarContent,\n    setIsClosing,\n    previousCardIdRef,\n  });\n\n  const currentSelectedTask = useMemo(() => {\n    if (!selectedTask) return null;\n    return localNotes.find((note) => note._id === selectedTask._id) || selectedTask;\n  }, [selectedTask, localNotes]);\n\n  const dateProperties = useMemo(() => {\n    if (!board?.properties) return [];\n    return Object.entries(board.properties)\n      .filter(([_, prop]: any) => prop.type === \"date\")\n      .map(([id, prop]: any) => ({ id, name: prop.name }));\n  }, [board.properties]);\n\n  const primaryDateProperty: any = dateProperties[0]?.id || \"dueDate_start\";\n\n  // Group notes by date, supporting date ranges\n  const notesByDate = useMemo(() => {\n    const filtered = localNotes.filter(\n      (note) => note.noteType === \"Viewdatabase_Note\" && note.databaseProperties?.[primaryDateProperty]\n    );\n    \n    const grouped: { [key: string]: Note[] } = {};\n    \n    filtered.forEach((note) => {\n      const dateValue = note.databaseProperties?.[primaryDateProperty];\n      if (!dateValue) return;\n      \n      const dateRange = parseDateRange(dateValue);\n      if (!dateRange) return;\n      \n      // Add note to all dates in its range\n      const current = new Date(dateRange.start);\n      while (current <= dateRange.end) {\n        const dateKey = current.toDateString();\n        if (!grouped[dateKey]) grouped[dateKey] = [];\n        grouped[dateKey].push(note);\n        current.setDate(current.getDate() + 1);\n      }\n    });\n    \n    return grouped;\n  }, [localNotes, primaryDateProperty]);\n\n  const calendarDays = useMemo(() => {\n    const year = currentDate.getFullYear();\n    const month = currentDate.getMonth();\n    const firstDayOfMonth = new Date(year, month, 1);\n    const lastDayOfMonth = new Date(year, month + 1, 0);\n\n    const startDate = new Date(firstDayOfMonth);\n    startDate.setDate(startDate.getDate() - startDate.getDay());\n\n    const endDate = new Date(lastDayOfMonth);\n    endDate.setDate(endDate.getDate() + (6 - endDate.getDay()));\n\n    const days: CalendarDay[] = [];\n    const today = new Date().toDateString();\n\n    for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {\n      const dateKey = d.toDateString();\n      days.push({\n        date: new Date(d),\n        isCurrentMonth: d.getMonth() === month,\n        isToday: dateKey === today,\n        notes: notesByDate[dateKey] || [],\n      });\n    }\n\n    return days;\n  }, [currentDate, notesByDate]);\n\n  // Drag and Drop handlers\n  const handleDragStart = (note: Note, e: React.DragEvent) => {\n    setDraggedNote(note);\n    e.dataTransfer.effectAllowed = \"move\";\n  };\n\n  const handleDragOver = (date: Date, e: React.DragEvent) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = \"move\";\n    setDropTargetDate(date.toDateString());\n  };\n\n  const handleDragLeave = () => {\n    setDropTargetDate(null);\n  };\n\n  const handleDrop = async (date: Date, e: React.DragEvent) => {\n    e.preventDefault();\n    setDropTargetDate(null);\n    \n    if (!draggedNote) return;\n    \n    const dateStr = date.toLocaleDateString(\"en-CA\");\n    const newDateValue = formatDateRange(date, date); // Single day by default\n    \n    // Update local state immediately\n    setLocalNotes(prev =>\n      prev.map(note =>\n        note._id === draggedNote._id\n          ? {\n              ...note,\n              databaseProperties: {\n                ...note.databaseProperties,\n                [primaryDateProperty]: newDateValue,\n              },\n            }\n          : note\n      )\n    );\n    \n    // Update backend\n    try {\n      await UpdateNote(\n        draggedNote._id,\n        draggedNote.title,\n        { [primaryDateProperty]: newDateValue },\n        \"\"\n      );\n      \n      const noteToUpdate = notes.find((note) => note._id === draggedNote._id);\n      if (noteToUpdate) {\n        const updatedNote = {\n          ...noteToUpdate,\n          databaseProperties: {\n            ...noteToUpdate.databaseProperties,\n            [primaryDateProperty]: newDateValue,\n          },\n        };\n        updateNote(board._id, draggedNote._id, updatedNote);\n      }\n    } catch (err) {\n      console.error(\"Failed to update task date:\", err);\n      setLocalNotes(notes);\n    }\n    \n    setDraggedNote(null);\n  };\n\n  const handleAddNewCard = async (date: Date, title: string = \"New Task\") => {\n    const dateProperties = Object.entries(board.properties || {})\n      .filter(([_, prop]: any) => prop.type === 'date');\n\n    const primaryDateProp = dateProperties[0];\n    if (!primaryDateProp) {\n      console.error(\"No date property found in board\");\n      return;\n    }\n  \n    const [datePropId] = primaryDateProp;\n    const dateString = formatDateRange(date, date);\n  \n    const tempId = `temp_${Date.now()}`;\n    const tempNote: Note = {\n      _id: tempId,\n      title,\n      description: \"\",\n      noteType: \"Viewdatabase_Note\",\n      databaseProperties: {\n        [datePropId]: dateString\n      },\n      content: \"\",\n      commitSha: \"\",\n      contentPath: \"\",\n      comments: [],\n    };\n  \n    setLocalNotes(prevNotes => [...prevNotes, tempNote]);\n  \n    try {\n      const { page: newPage } = await addRootPage(\n        title,\n        null,\n        false,\n        null,\n        false,\n        board._id,\n        datePropId,\n        dateString\n      );\n        \n      setLocalNotes(prevNotes =>\n        prevNotes.map(note =>\n          note._id === tempId\n            ? {\n                _id: newPage.id,\n                title: newPage.title,\n                description: newPage.description || \"\",\n                noteType: newPage.noteType || \"Viewdatabase_Note\",\n                databaseProperties: newPage.databaseProperties || {},\n                content: newPage.content || \"\",\n                commitSha: newPage.commitSha,\n                contentPath: newPage.contentPath || \"\",\n                comments: [],\n              }\n            : note\n        )\n      );\n  \n      updateNote(board._id, tempId, {\n        _id: newPage.id,\n        title: newPage.title,\n        description: newPage.description || \"\",\n        noteType: newPage.noteType || \"Viewdatabase_Note\",\n        databaseProperties: newPage.databaseProperties || {},\n        content: newPage.content || \"\",\n        commitSha: newPage.commitSha,\n        contentPath: newPage.contentPath || \"\",\n        comments: [],\n      });\n    } catch (err) {\n      console.error(\"Failed to create task for date:\", err);\n      setLocalNotes(prevNotes => prevNotes.filter(note => note._id !== tempId));\n    }\n  };\n\n  const handleEditCard = async (noteId: string, newTitle: string) => {\n    setLocalNotes(prev =>\n      prev.map(note =>\n        note._id === noteId ? { ...note, title: newTitle } : note\n      )\n    );\n\n    try {\n      await UpdateNote(noteId, newTitle, null, \"\");\n      const noteToUpdate = notes.find((note) => note._id === noteId);\n\n      if (noteToUpdate) {\n        const updatedNote = { ...noteToUpdate, title: newTitle };\n        updateNote(board._id, noteId, updatedNote);\n      }\n    } catch (err) {\n      console.error(\"Failed to update task:\", err);\n      setLocalNotes(notes);\n    }\n  };\n\n  const handleDeleteNote = async (noteId: string) => {\n    setLocalNotes(prevNotes => \n      prevNotes.filter(note => note._id !== noteId)\n    );\n\n    try {\n      const deleteNote = await DeleteNote(noteId);\n      if (deleteNote) {\n        const newNotes = notes.filter((note) => note._id !== noteId);\n        updateAllNotes(board._id, newNotes);\n      }\n    } catch (err) {\n      console.error(\"Failed to delete task:\", err);\n      setLocalNotes(notes);\n    }\n  };\n\n  const handleUpdate = async (updatedNote: Note) => {\n    if (updatedNote.title !== selectedTask?.title) {\n      await handleEditCard(updatedNote._id, updatedNote.title);\n    }\n\n    setLocalNotes(prevNotes => \n      prevNotes.map(note => \n        note._id === updatedNote._id ? updatedNote : note\n      )\n    );\n\n    setSelectedTask(updatedNote);\n  };\n\n  const handleUpdateDateRange = async (note: Note, newStart: Date, newEnd: Date) => {\n    const newDateValue = formatDateRange(newStart, newEnd);\n    \n    setLocalNotes(prev =>\n      prev.map(n =>\n        n._id === note._id\n          ? {\n              ...n,\n              databaseProperties: {\n                ...n.databaseProperties,\n                [primaryDateProperty]: newDateValue,\n              },\n            }\n          : n\n      )\n    );\n    \n    try {\n      await UpdateNote(\n        note._id,\n        note.title,\n        { [primaryDateProperty]: newDateValue },\n        \"\"\n      );\n      \n      const noteToUpdate = notes.find((n) => n._id === note._id);\n      if (noteToUpdate) {\n        const updatedNote = {\n          ...noteToUpdate,\n          databaseProperties: {\n            ...noteToUpdate.databaseProperties,\n            [primaryDateProperty]: newDateValue,\n          },\n        };\n        updateNote(board._id, note._id, updatedNote);\n      }\n    } catch (err) {\n      console.error(\"Failed to update task date range:\", err);\n      setLocalNotes(notes);\n    }\n  };\n\n  const getStatusColor = (note: Note) => {\n    const statusPropEntry = Object.entries(board.properties || {}).find(\n      ([_, prop]: any) => prop.type === \"status\" && prop.default\n    );\n    if (!statusPropEntry) return { bg: \"#f3f4f6\", text: \"#374151\" };\n    const [statusPropId] = statusPropEntry;\n    const statusValue = note.databaseProperties?.[statusPropId];\n    const statusColors: { [key: string]: { bg: string; text: string } } = {\n      'Todo': { bg: '#fef3c7', text: '#92400e' },\n      'In Progress': { bg: '#dbeafe', text: '#1e40af' },\n      'Done': { bg: '#d1fae5', text: '#065f46' }\n    };\n    return statusColors[statusValue] || { bg: \"#f3f4f6\", text: \"#374151\" };\n  };\n\n  return (\n    <div className=\"w-full max-w-[1300px] h-full bg-white dark:bg-background\">\n      <CalendarHeader currentDate={currentDate} setCurrentDate={setCurrentDate} />\n\n      <div className=\"flex flex-col h-full\">\n        <div className=\"grid grid-cols-7\">\n          {weekDays.map((day) => (\n            <div key={day} className=\"p-4 text-center text-sm font-medium text-gray-500 dark:text-gray-400\">\n              {day}\n            </div>\n          ))}\n        </div>\n\n        <div className=\"border rounded-lg\">\n          <div className=\"grid grid-cols-7 flex-1 divide-x divide-gray-200 dark:divide-gray-800\">\n            {calendarDays.map((day, index) => {\n              const dayString = day.date.toDateString();\n              const isDropTargetDay = dropTargetDate === dayString;\n\n              return (\n                <div\n                  key={index}\n                  className={`group relative min-h-32 p-2 border-b transition-all ${\n                    !day.isCurrentMonth\n                      ? 'bg-gray-50 dark:bg-gray-700'\n                      : 'bg-white dark:bg-background'\n                  } ${\n                    day.isToday ? 'bg-blue-100 dark:bg-blue-900/20' : ''\n                  } hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors`}\n                  onDoubleClick={() => handleAddNewCard(day.date)}\n                  onDragOver={(e) => handleDragOver(day.date, e)}\n                  onDragLeave={handleDragLeave}\n                  onDrop={(e) => handleDrop(day.date, e)}\n                >\n                  <div className=\"flex items-center justify-between mb-2 pl-1\">\n                    <span className={`text-sm font-medium ${\n                      day.isToday\n                        ? 'text-blue-600'\n                        : day.isCurrentMonth\n                        ? 'text-gray-900 dark:text-gray-400'\n                        : 'text-gray-400 dark:text-gray-400'\n                    }`}>\n                      {day.date.getDate()}\n                    </span>\n\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleAddNewCard(day.date);\n                      }}\n                      className=\"absolute right-2 top-2 opacity-0 group-hover:opacity-100 p-1 rounded bg-gray-200 dark:bg-gray-700 text-gray-500 hover:bg-gray-300 dark:hover:bg-gray-600 transition-all\"\n                    >\n                      <PlusIcon className=\"h-4 w-4\" />\n                    </button>\n                  </div>\n\n                  {isDropTargetDay && (\n                    <div className=\"absolute inset-0 bg-blue-200/50 dark:bg-blue-800/60 pointer-events-none rounded\" />\n                  )}\n\n                  <div className=\"space-y-1\">\n                    {day.notes.map((note) => (\n                      <CalendarCard\n                        key={note._id}\n                        card={note}\n                        board={board}\n                        colors={getStatusColor(note)}\n                        onEdit={(newTitle) => handleEditCard(note._id, newTitle)}\n                        onDelete={() => handleDeleteNote(note._id)}\n                        onClick={handleCardClick}\n                        onDragStart={(e) => handleDragStart(note, e)}\n                        onUpdateDateRange={(start, end) => handleUpdateDateRange(note, start, end)}\n                        primaryDateProperty={primaryDateProperty}\n                      />\n                    ))}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n\n      {currentSelectedTask && (\n        <RightSidebar\n          note={currentSelectedTask}\n          board={board}\n          initialContent={rightSidebarContent}\n          onClose={handleCloseSidebar}\n          isClosing={isClosing}\n          onUpdate={handleUpdate}\n        />\n      )}\n    </div>\n  );\n}"
          }
        ]
      }
    ]
  },
  "online_content_time": "2025-10-22T10:16:29.944Z"
}