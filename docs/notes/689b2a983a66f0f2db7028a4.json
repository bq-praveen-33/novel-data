{
  "online_content": {
    "type": "doc",
    "content": [
      {
        "type": "codeBlock",
        "attrs": {
          "language": "typescriptreact"
        },
        "content": [
          {
            "type": "text",
            "text": "import { useState, useEffect, useRef } from \"react\";\nimport { Bell, X } from \"lucide-react\";\n\ninterface Notification {\n  id: string;\n  type: \"workspace-request\" | \"shared-note\" | \"status-update\";\n  message: string;\n  user?: string;\n  noteTitle?: string;\n  read?: boolean;\n  timestamp?: string;\n}\n\nexport default function NotificationModal() {\n  const [open, setOpen] = useState(false);\n  const [notifications, setNotifications] = useState<Notification[]>([\n    {\n      id: \"1\",\n      type: \"workspace-request\",\n      message: \"wants to join your workspace\",\n      user: \"Alice\",\n      read: false,\n      timestamp: \"2 min ago\"\n    },\n    {\n      id: \"2\",\n      type: \"shared-note\",\n      message: \"shared a note with you\",\n      user: \"Bob\",\n      noteTitle: \"Project Plan\",\n      read: true,\n      timestamp: \"1 hour ago\"\n    },\n    {\n      id: \"3\",\n      type: \"status-update\",\n      message: \"Your note 'Weekly Report' got approved\",\n      noteTitle: \"Weekly Report\",\n      read: false,\n      timestamp: \"Yesterday\"\n    },\n  ]);\n\n  const modalRef = useRef<HTMLDivElement | null>(null);\n  const buttonRef = useRef<HTMLButtonElement | null>(null);\n\n  // Close when clicking outside\n  useEffect(() => {\n    function handleClickOutside(e: MouseEvent) {\n      if (modalRef.current && !modalRef.current.contains(e.target as Node)) {\n        setOpen(false);\n      }\n    }\n    if (open) document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, [open]);\n\n  // Close on Esc key\n  useEffect(() => {\n    function handleEsc(e: KeyboardEvent) {\n      if (e.key === \"Escape\") setOpen(false);\n    }\n    if (open) document.addEventListener(\"keydown\", handleEsc);\n    return () => document.removeEventListener(\"keydown\", handleEsc);\n  }, [open]);\n\n  const handleAccept = (id: string) => {\n    setNotifications(prev => prev.map(n => \n      n.id === id ? { ...n, read: true } : n\n    ));\n  };\n\n  const handleReject = (id: string) => {\n    setNotifications(prev => prev.map(n => \n      n.id === id ? { ...n, read: true } : n\n    ));\n  };\n\n  const markAllAsRead = () => {\n    setNotifications(prev => prev.map(n => ({ ...n, read: true })));\n  };\n\n  const unreadCount = notifications.filter(n => !n.read).length;\n\n  return (\n    <div className=\"relative\">\n      {/* Bell Icon */}\n      <button\n        ref={buttonRef}\n        onClick={() => setOpen(!open)}\n        className=\"relative p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors\"\n        aria-label=\"Notifications\"\n      >\n        <Bell className=\"w-5 h-5 text-gray-700 dark:text-gray-300\" />\n        {unreadCount > 0 && (\n          <span className=\"absolute top-0 right-0 bg-gray-600 dark:bg-gray-200 text-white dark:text-gray-800 text-xs font-medium rounded-full h-4 w-4 flex items-center justify-center\">\n            {unreadCount}\n          </span>\n        )}\n      </button>\n\n      {/* Modal - Positioned below the button */}\n      {open && (\n        <div className=\"fixed inset-0 z-50 md:absolute md:inset-auto md:right-0 md:top-12\">\n          {/* Backdrop - Only for mobile */}\n          <div \n            className=\"fixed inset-0 bg-black/30 backdrop-blur-sm md:hidden\" \n            onClick={() => setOpen(false)}\n          />\n\n          {/* Modal Box */}\n          <div\n            ref={modalRef}\n            className=\"absolute right-0 mt-2 w-80 sm:w-96 md:w-[28rem] lg:max-w-[50vw] xl:max-w-[40vw] bg-white dark:bg-gray-900 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 z-50 max-h-[80vh] overflow-hidden\"\n          >\n\n            {/* Header */}\n            <div className=\"flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700\">\n              <div className=\"flex items-center space-x-2\">\n                <h2 className=\"font-semibold text-gray-900 dark:text-gray-100\">\n                  Notifications\n                </h2>\n                {unreadCount > 0 && (\n                  <span className=\"bg-gray-800 dark:bg-gray-200 text-white dark:text-gray-900 text-xs px-2 py-0.5 rounded-full\">\n                    {unreadCount} new\n                  </span>\n                )}\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <button\n                  onClick={markAllAsRead}\n                  className=\"text-xs text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-gray-100 hover:underline\"\n                  disabled={unreadCount === 0}\n                >\n                  Mark all as read\n                </button>\n                <button\n                  onClick={() => setOpen(false)}\n                  className=\"p-1 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-500 dark:text-gray-400\"\n                >\n                  <X className=\"w-4 h-4\" />\n                </button>\n              </div>\n            </div>\n\n            {/* Notification List */}\n            <div className=\"divide-y divide-gray-200 dark:divide-gray-700 overflow-y-auto max-h-[calc(80vh-57px)]\">\n              {notifications.length === 0 ? (\n                <div className=\"p-6 text-center\">\n                  <p className=\"text-gray-500 dark:text-gray-400 text-sm\">\n                    No notifications yet\n                  </p>\n                </div>\n              ) : (\n                notifications.map((n) => (\n                  <div\n                    key={n.id}\n                    className={`p-4 ${!n.read ? \"bg-gray-50 dark:bg-gray-800\" : \"bg-white dark:bg-gray-900\"}`}\n                  >\n                    <div className=\"flex items-start space-x-3\">\n                      <div className={`mt-0.5 flex-shrink-0 h-2 w-2 rounded-full ${!n.read ? \"bg-gray-800 dark:bg-gray-200\" : \"bg-transparent\"}`} />\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex justify-between\">\n                          <p className=\"text-sm font-medium text-gray-900 dark:text-gray-100 truncate\">\n                            {n.user || \"System\"}\n                          </p>\n                          <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n                            {n.timestamp}\n                          </span>\n                        </div>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-300 mt-1\">\n                          {n.message}{n.noteTitle && (\n                            <span className=\"font-medium\"> \"{n.noteTitle}\"</span>\n                          )}\n                        </p>\n                        {n.type === \"workspace-request\" && (\n                          <div className=\"mt-3 flex gap-2\">\n                            <button\n                              onClick={() => handleAccept(n.id)}\n                              className=\"px-3 py-1 bg-gray-500 text-gray-200 text-xs rounded hover:bg-gray-700 transition\"\n                            >\n                              Accept\n                            </button>\n                            <button\n                              onClick={() => handleReject(n.id)}\n                              className=\"px-3 py-1 bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 text-xs rounded hover:bg-gray-300 dark:hover:bg-gray-600 transition\"\n                            >\n                              Reject\n                            </button>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}"
          }
        ]
      }
    ]
  },
  "online_content_time": "2025-08-18T12:10:32.374Z"
}