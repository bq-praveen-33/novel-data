{
  "online_content": {
    "type": "doc",
    "content": [
      {
        "type": "codeBlock",
        "attrs": {
          "language": "typescriptreact"
        },
        "content": [
          {
            "type": "text",
            "text": "\"use client\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/tailwind/ui/popover\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport CryptoJS from \"crypto-js\";\nimport { ArrowRight, Loader2, Lock, Plus, Sparkles, Unlock, Users, Zap } from \"lucide-react\";\nimport { ChevronDown, LogOut, Settings, User } from \"lucide-react\";\nimport Image from \"next/image\";\nimport { useParams, useRouter } from \"next/navigation\";\nimport { useEffect, useState } from \"react\";\n\n// Encrypt\nfunction encryptData(data: object) {\n  return CryptoJS.AES.encrypt(JSON.stringify(data), SECRET_KEY).toString();\n}\n\n// Decrypt\nfunction decryptData(ciphertext: string) {\n  const bytes = CryptoJS.AES.decrypt(ciphertext, SECRET_KEY);\n  return JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n}\n\nimport { OverlappingAvatars } from \"@/components/tailwind/ui/avatar\";\nimport { useWorkspaceContext } from \"@/contexts/workspaceContext\";\nimport { isWorkspaceMember } from \"@/services-frontend/user/userServices\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { type VariantProps, cva } from \"class-variance-authority\";\nimport * as React from \"react\";\nimport { toast } from \"sonner\";\nimport { getWithAuth, postWithAuth } from \"@/lib/api-helpers\";\nimport type { Members, Workspace } from \"@/types/workspace\";\nimport { Avatar } from \"@/components/tailwind/ui/avatar\";\nimport { useNotifications } from \"@/hooks/use-notifications\";\nimport { Notification } from \"@/types/notification\";\n\n// ---------- LOCAL COMPONENTS ----------\n\nconst SECRET_KEY = process.env.CJS_TOKEN;\n\n// Button\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-lg text-sm font-medium ring-offset-background transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-400 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:scale-102 active:scale-98\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-black text-white shadow-sm hover:shadow-md hover:bg-gray-800 dark:bg-white dark:text-black dark:hover:bg-gray-100\",\n        destructive: \"bg-red-600 text-white shadow-sm hover:shadow-md hover:bg-red-700\",\n        outline:\n          \"border border-gray-300 bg-white text-gray-900 hover:bg-gray-50 hover:border-gray-400 dark:border-gray-600 dark:bg-gray-800 dark:text-white dark:hover:bg-gray-700 dark:hover:border-gray-500\",\n        ghost:\n          \"bg-transparent hover:bg-gray-100 text-gray-700 hover:text-gray-900 dark:hover:bg-gray-800 dark:text-gray-300 dark:hover:text-white\",\n        join: \"bg-gray-900 text-white shadow-sm hover:shadow-md hover:bg-black dark:bg-white dark:text-black dark:hover:bg-gray-100\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 py-1.5 text-xs\",\n        lg: \"h-10 rounded-lg px-5 py-2.5 text-sm\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement>, VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return <Comp ref={ref} className={buttonVariants({ variant, size, className })} {...props} />;\n  },\n);\nButton.displayName = \"Button\";\n\n// Input\ninterface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {}\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(({ className, type, ...props }, ref) => (\n    <input\n      type={type}\n      ref={ref}\n      className={`flex h-10 w-full rounded-lg border border-gray-300 bg-white px-3 py-2 text-sm ring-offset-background placeholder:text-gray-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-400 focus-visible:ring-offset-2 focus-visible:border-gray-400 dark:border-gray-600 dark:bg-gray-800 dark:text-white dark:placeholder:text-gray-400 dark:focus-visible:ring-gray-500 dark:focus-visible:border-gray-500 disabled:cursor-not-allowed disabled:opacity-50 transition-all duration-200 ${className}`}\n      {...props}\n    />\n  ));\nInput.displayName = \"Input\";\n\n// Subtle Background Elements\nconst BackgroundElement = ({ className, delay = 0 }: { className: string; delay?: number }) => (\n  <div className={`absolute opacity-5 ${className}`} style={{ animationDelay: `${delay}s` }} />\n);\n\n// ---------- WORKSPACE PAGE ----------\n\nexport default function OrganizationWorkspacePage() {\n  const router = useRouter();\n  const params = useParams();\n  const orgId = params.orgId as string;\n\n  const [loading, setLoading] = useState(true);\n    // const [workspaces, setWorkspaces] = useState<Workspace[]>([]);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [workspaceName, setWorkspaceName] = useState(\"\");\n  const { user } = useAuth();\n  const [requestedWorkspaces, setRequestedWorkspaces] = useState<string[]>([]);\n  const { workspaces, fetchAllWorkspace, setCurrentWorkspace, handleSelectedWorkspace } = useWorkspaceContext();\n  const [joining, setJoining] = useState<string | null>(null);\n  const { mentionUser, shareNote, sendJoinRequest, decideJoinRequest } = useNotifications();\n\n  const { logout } = useAuth();\n\n  if (!user) return null;\n\n  // Load requests from localStorage when page loads\n  useEffect(() => {\n    const savedRequests = localStorage.getItem(\"requestedWorkspaces\");\n    if (savedRequests) {\n      setRequestedWorkspaces(JSON.parse(savedRequests));\n    }\n  }, []);\n\n  // Save requests whenever updated\n  useEffect(() => {\n    localStorage.setItem(\"requestedWorkspaces\", JSON.stringify(requestedWorkspaces));\n  }, [requestedWorkspaces]);\n\n  // Fetch all workspaces for the org\n  const fetchWorkspaces = async () => {\n    try {\n      setLoading(true);\n      const data = await fetchAllWorkspace();\n    } catch (err) {\n      console.error(\"Error fetching workspaces:\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Create new workspace\n  const createWorkspace = async () => {\n    if (!workspaceName.trim()) return;\n    try {\n      setShowCreateModal(false);\n      const newWs = await postWithAuth(\"/api/workSpace/create\", {\n        name: workspaceName,\n      });\n      localStorage.setItem(\"selectedWorkspaceName\", workspaceName);\n\n      // Encrypt workspaceId\n      const encrypted = CryptoJS.AES.encrypt(\n        JSON.stringify({ workspaceId: newWs._id }),\n        SECRET_KEY,\n      ).toString();\n\n      // Store encrypted token in cookie\n      document.cookie = `workspace=${encodeURIComponent(\n        encrypted,\n      )}; path=/; max-age=${60 * 60 * 24}; samesite=strict`;\n\n      router.push(`/notes`); // redirect to workspace page if needed\n    } catch (err) {\n      console.error(\"Error creating workspace:\", err);\n    }\n  };\n\n  // Join a workspace\n  const joinWorkspace = async (workspaceId: string, userEmail: string, workspaceMebers: Members[]) => {\n    const type = 'JOIN'\n    setJoining(workspaceId);\n    try {\n      const response = await postWithAuth('/api/notification/add', {\n        userEmail, \n        message: \"Request to join the Workspace\", \n        type,\n        workspaceId \n      })\n      \n      if (\"error\" in response || \"message\" in response) {\n        return null;\n      }\n      // 2️⃣ Send real-time socket notification\n      sendJoinRequest(response.notification, workspaceMebers);\n      \n      // ✅ Add workspace to requested list\n      setRequestedWorkspaces((prev) => [...prev, workspaceId]);\n      toast.success(\"Request to join workspace send successfully\");\n\n    } catch (err) {\n      console.error(\"Error joining workspace:\", err);\n      toast.error(err);\n    }\n    finally{\n      setJoining(null);\n    }\n  };\n\n\n\n  const sortedWorkspaces = React.useMemo(() => {\n    if (!user) return workspaces;\n  \n    const members = workspaces.filter(ws => isWorkspaceMember(ws, user.email));\n    const requested = workspaces.filter(ws => \n      ws.notifications?.some(n => n.requesterEmail === user.email) ||\n      requestedWorkspaces.includes(ws._id)\n    );\n\n    const others = workspaces.filter(ws => \n      !isWorkspaceMember(ws, user.email) &&\n      !(ws.notifications?.some(n => n.requesterEmail === user.email) || requestedWorkspaces.includes(ws._id))\n    );\n  \n    return [...members, ...requested, ...others];\n  }, [workspaces, user, requestedWorkspaces]);\n\n  useEffect(() => {\n    console.log(\"printing sorted Workspace\", sortedWorkspaces, workspaces)\n  },[sortedWorkspaces, workspaces])\n\n  useEffect(() => {\n    fetchWorkspaces();\n  }, [orgId]);\n\n  if (loading) {\n    return (\n      <div className=\"flex min-h-screen items-center justify-center bg-white dark:bg-black\">\n        <div className=\"relative\">\n          <div className=\"absolute inset-0 bg-gray-200 dark:bg-gray-800 rounded-full blur-xl opacity-20 animate-pulse\" />\n          <Loader2 className=\"relative animate-spin w-12 h-12 text-gray-900 dark:text-white\" />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen w-full relative overflow-hidden bg-white dark:bg-black\">\n    {/* Subtle Background Elements */}\n    <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n      <BackgroundElement\n        className=\"w-96 h-96 border border-gray-300 dark:border-gray-700 -top-48 -right-48 rotate-45\"\n        delay={0}\n      />\n      <BackgroundElement\n        className=\"w-80 h-80 border border-gray-200 dark:border-gray-800 -bottom-40 -left-40 rounded-full\"\n        delay={2}\n      />\n      <BackgroundElement\n        className=\"w-64 h-64 bg-gray-100 dark:bg-gray-900 top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 rotate-12\"\n        delay={4}\n      />\n      <div className=\"absolute inset-0 bg-[url('data:image/svg+xml,%3Csvg%20width%3D%2260%22%20height%3D%2260%22%20viewBox%3D%220%200%2060%2060%22%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%3E%3Cg%20fill%3D%22none%22%20fill-rule%3D%22evenodd%22%3E%3Cg%20fill%3D%22%23999%22%20fill-opacity%3D%220.02%22%3E%3Crect%20x%3D%2230%22%20y%3D%2230%22%20width%3D%222%22%20height%3D%222%22/%3E%3C/g%3E%3C/g%3E%3C/svg%3E')] opacity-30\" />\n    </div>\n\n    <div className=\"relative z-10 px-8 py-6\">\n      {/* Header with User Menu */}\n      <div className=\"w-full flex justify-end mb-8\">\n        <Popover>\n          <PopoverTrigger asChild>\n            <button className=\"group relative flex items-center gap-3 px-3 py-2 rounded-lg bg-white/90 dark:bg-gray-900/90 backdrop-blur-sm border border-gray-200 dark:border-gray-700 hover:bg-white dark:hover:bg-gray-900 hover:shadow-sm transition-all duration-200\">\n              <div className=\"relative h-8 w-8 overflow-hidden rounded-full border border-transparent group-hover:border-gray-300 dark:group-hover:border-gray-600 transition-colors\">\n                {user.image ? (\n                  <Image src={user.image} alt=\"Profile\" fill className=\"object-cover\" />\n                ) : (\n                  <div className=\"w-full h-full bg-gray-900 dark:bg-white flex items-center justify-center text-white dark:text-black font-semibold text-sm\">\n                    {user.name?.charAt(0) || \"U\"}\n                  </div>\n                )}\n              </div>\n              <div className=\"hidden sm:block text-left\">\n                <p className=\"text-sm font-medium text-gray-900 dark:text-white\">{user.name}</p>\n                <p className=\"text-xs text-gray-500 dark:text-gray-400\">{user.email}</p>\n              </div>\n              <ChevronDown className=\"h-4 w-4 text-gray-500 dark:text-gray-300 transition-transform group-data-[state=open]:rotate-180\" />\n            </button>\n          </PopoverTrigger>\n          <PopoverContent\n            className=\"w-64 p-2 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 bg-white/95 dark:bg-gray-900/95 backdrop-blur-sm\"\n            align=\"end\"\n            sideOffset={8}\n          >\n            {/* User Profile Section */}\n            <div className=\"flex items-center gap-3 p-3 border-b border-gray-100 dark:border-gray-700\">\n              <div className=\"relative h-10 w-10 overflow-hidden rounded-full ring ring-gray-100 dark:ring-gray-800\">\n                {user.image ? (\n                  <Image src={user.image} alt=\"Profile\" fill className=\"object-cover\" />\n                ) : (\n                  <div className=\"w-full h-full bg-gray-900 dark:bg-white flex items-center justify-center text-white dark:text-black font-semibold\">\n                    {user.name?.charAt(0) || \"U\"}\n                  </div>\n                )}\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-sm font-semibold text-gray-900 dark:text-white truncate\">{user.name}</p>\n                <p className=\"text-xs text-gray-500 dark:text-gray-400 truncate\">{user.email}</p>\n              </div>\n            </div>\n\n            {/* Menu Items */}\n            <div className=\"p-2 space-y-1\">\n              <button\n                type=\"button\"\n                className=\"flex w-full items-center gap-3 rounded-md px-3 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors\"\n              >\n                <User className=\"h-4 w-4\" />\n                <span>Profile Settings</span>\n              </button>\n              <button\n                type=\"button\"\n                className=\"flex w-full items-center gap-3 rounded-md px-3 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors\"\n              >\n                <Settings className=\"h-4 w-4\" />\n                <span>Preferences</span>\n              </button>\n            </div>\n\n            {/* Sign Out Button */}\n            <div className=\"p-2 pt-1 border-t border-gray-100 dark:border-gray-700\">\n              <button\n                type=\"button\"\n                onClick={logout}\n                className=\"flex w-full items-center gap-3 rounded-md px-3 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20 transition-colors\"\n              >\n                <LogOut className=\"h-4 w-4\" />\n                <span>Sign out</span>\n              </button>\n            </div>\n          </PopoverContent>\n        </Popover>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"inline-flex items-center justify-center w-12 h-12 rounded-xl bg-gray-900 dark:bg-white shadow-sm\">\n                <Users className=\"w-6 h-6 text-white dark:text-black\" />\n              </div>\n              <h1 className=\"text-4xl font-bold text-gray-900 dark:text-white\">Workspaces</h1>\n            </div>\n            <Button\n              onClick={() => setShowCreateModal(true)}\n              size=\"icon\"\n              variant=\"outline\"\n              className=\"h-16 w-16 rounded-2xl\"\n            >\n              <Plus className=\"w-7 h-7\" />\n            </Button>\n          </div>\n          <p className=\"text-gray-500 dark:text-gray-300 ml-0 sm:ml-16\">\n            Create collaborative spaces where your team can organize, innovate, and share ideas together\n          </p>\n        </div>\n\n        {/* Workspace List */}\n        <div className=\"space-y-3\">\n          {sortedWorkspaces.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <p className=\"text-gray-500 dark:text-gray-400 mb-1\">No workspaces yet</p>\n              <p className=\"text-sm text-gray-400 dark:text-gray-500\">Create your first workspace to get started</p>\n            </div>\n          ) : (\n            sortedWorkspaces.map((ws: Workspace) => {\n              let member;\n              if (user) {\n                member = isWorkspaceMember(ws, user.email);\n              }\n\n              const members = ws.members || [];\n              const isRequested =\n                ws.notifications?.some((n) => n.requesterEmail === user?.email) ||\n                requestedWorkspaces.includes(ws._id);\n\n              return (\n                <div\n                  key={ws._id}\n                  className={`group relative p-4 rounded-lg border transition-all duration-200 cursor-pointer hover:shadow-sm ${\n                    member\n                      ? \"border-gray-300 dark:border-gray-600 bg-gray-50 dark:bg-gray-800/50 hover:bg-gray-100 dark:hover:bg-gray-800\"\n                      : isRequested\n                        ? \"border-gray-300 dark:border-gray-600 bg-gray-50 dark:bg-gray-800/50 hover:bg-gray-100 dark:hover:bg-gray-800\"\n                        : \"border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900 hover:bg-gray-50 dark:hover:bg-gray-800\"\n                  }`}\n                  onClick={() => {\n                    if (member) {\n                      localStorage.setItem(\"selectedWorkspaceName\", ws.name);\n                      const encrypted = CryptoJS.AES.encrypt(\n                        JSON.stringify({ workspaceId: ws._id }),\n                        SECRET_KEY,\n                      ).toString();\n                      document.cookie = `workspace=${encodeURIComponent(\n                        encrypted,\n                      )}; path=/; max-age=${60 * 60 * 24}; samesite=strict`;\n                      handleSelectedWorkspace(ws);\n                      router.push(\"/notes\");\n                    }\n                  }}\n                  onKeyPress={(e) => {\n                    if (e.key === \"Enter\" && member) {\n                      localStorage.setItem(\"selectedWorkspaceName\", ws.name);\n                      const encrypted = CryptoJS.AES.encrypt(\n                        JSON.stringify({ workspaceId: ws._id }),\n                        SECRET_KEY,\n                      ).toString();\n                      document.cookie = `workspace=${encodeURIComponent(\n                        encrypted,\n                      )}; path=/; max-age=${60 * 60 * 24}; samesite=strict`;\n                      handleSelectedWorkspace(ws);\n                      router.push(\"/notes\");\n                    }\n                  }}\n                  role=\"button\"\n                  tabIndex={0}\n                >\n            {/* Workspace Name */}\n            <div className=\"flex-shrink-0 w-[33%]\">\n              <div className=\"flex items-center gap-3\">\n              <div className=\"truncate\">           \n                  <p className=\"font-medium text-lg text-gray-900 dark:text-white\">{ws.name}</p>\n                  <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                      Created {new Date(ws.createdAt).toLocaleDateString()}\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            {/* Member Avatars */}\n            <div className=\"flex-grow flex justify-center px-4 w-[33%]\">\n              {members.length > 0 ? (\n                <OverlappingAvatars members={members} maxVisible={3} />\n              ) : (\n                <span className=\"text-sm text-gray-500 dark:text-gray-400 italic\">\n                  No members yet\n                </span>\n              )}\n            </div>\n\n            {/* Join Button or Status */}\n            <div className=\"flex-shrink-0\">\n              {member ? (\n                <div className=\"flex items-center gap-2 px-4 py-2 text-green-700 dark:text-green-300 rounded-lg\">\n                  <ArrowRight className=\"w-5 h-5 font-medium\" />\n                </div>\n              ) : (\n                <div>\n                  {ws.notifications?.some((n) => n.requesterEmail === user?.email) || \n                    requestedWorkspaces.includes(ws._id)\n                    ? (\n                    <Button size=\"sm\" disabled>\n                      Requested\n                    </Button>\n                  ) : (\n                    <Button\n                      onClick={(e) => {\n                        e.stopPropagation(); // prevent triggering parent onClick\n                        if(user) joinWorkspace(ws._id, user.email, ws.members);\n                      }}\n                      size=\"sm\"\n                      disabled={joining === ws._id} // disable while loading\n                    >\n                    Join\n                    </Button>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n          );\n          })\n        )}\n      </div>\n\n      {/* Create Workspace Modal */}\n      {showCreateModal && (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40\">\n          <div className=\"bg-white dark:bg-gray-800 shadow-2xl rounded-2xl p-8 w-full max-w-md backdrop-blur-sm\">\n            <div className=\"flex flex-col gap-4\">\n              <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">Create Workspace</h2>\n              <Input\n                placeholder=\"Workspace Name\"\n                value={workspaceName}\n                onChange={(e) => setWorkspaceName(e.target.value)}\n                className=\"text-lg\"\n              />\n              <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                Your workspace will be where your team collaborates, organizes, and shares ideas.\n              </p>\n\n              <div className=\"flex justify-end gap-3 mt-2\">\n                <Button onClick={() => setShowCreateModal(false)} variant=\"outline\" size=\"lg\">\n                  Cancel\n                </Button>\n                <Button onClick={createWorkspace} size=\"lg\">\n                  Create\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"
          }
        ]
      }
    ]
  },
  "online_content_time": "2025-08-27T08:45:03.158Z"
}