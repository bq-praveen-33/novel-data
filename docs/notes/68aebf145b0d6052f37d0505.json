{
  "online_content": {
    "type": "doc",
    "content": [
      {
        "type": "codeBlock",
        "attrs": {
          "language": "typescriptreact"
        },
        "content": [
          {
            "type": "text",
            "text": "\"use client\";\nimport CryptoJS from \"crypto-js\";\nimport { useEffect, useState } from \"react\";\nimport { useRouter, useParams } from \"next/navigation\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { ArrowRight, Loader2, Users } from \"lucide-react\";\nimport * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { getWithAuth, postWithAuth } from \"@/lib/api-helpers\";\nimport type { Members, Workspace } from \"@/types/workspace\";\nimport { isWorkspaceMember } from \"@/services-frontend/user/userServices\";\nimport { toast } from \"sonner\";\nimport { useWorkspaceContext } from \"@/contexts/workspaceContext\";\nimport { Avatar, OverlappingAvatars } from \"@/components/tailwind/ui/avatar\";\nimport { useNotifications } from \"@/hooks/use-notifications\";\nimport { Notification } from \"@/types/notification\";\n\n// ---------- LOCAL COMPONENTS ----------\n\nconst SECRET_KEY = process.env.CJS_TOKEN;\n// Button\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n     },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement>, VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return <Comp ref={ref} className={buttonVariants({ variant, size, className })} {...props} />;\n  }\n);\nButton.displayName = \"Button\";\n\n// Input\ninterface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {}\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(({ className, type, ...props }, ref) => (\n    <input\n      type={type}\n      ref={ref}\n      className={`flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 ${className}`}\n      {...props}\n    />\n  ));\nInput.displayName = \"Input\";\n\n// ---------- WORKSPACE PAGE ----------\n\nexport default function OrganizationWorkspacePage() {\n  const router = useRouter();\n  const params = useParams();\n  const orgId = params.orgId as string;\n\n  const [loading, setLoading] = useState(true);\n    // const [workspaces, setWorkspaces] = useState<Workspace[]>([]);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [workspaceName, setWorkspaceName] = useState(\"\");\n  const {user} = useAuth();\n  const [requestedWorkspaces, setRequestedWorkspaces] = useState<string[]>([]);\n  const { workspaces, fetchAllWorkspace, setCurrentWorkspace , handleSelectedWorkspace } = useWorkspaceContext();\n  const [joining, setJoining] = useState<string | null>(null);\n  const { mentionUser, shareNote, sendJoinRequest, decideJoinRequest } = useNotifications();\n\n\n\n  // Load requests from localStorage when page loads\n  useEffect(() => {\n    const savedRequests = localStorage.getItem(\"requestedWorkspaces\");\n    if (savedRequests) {\n      setRequestedWorkspaces(JSON.parse(savedRequests));\n    }\n  }, []);\n\n  // Save requests whenever updated\n  useEffect(() => {\n    localStorage.setItem(\"requestedWorkspaces\", JSON.stringify(requestedWorkspaces));\n  }, [requestedWorkspaces]);\n\n\n  // Fetch all workspaces for the org\n  const fetchWorkspaces = async () => {\n    try {\n      setLoading(true);\n      const data = await fetchAllWorkspace();\n    } catch (err) {\n      console.error(\"Error fetching workspaces:\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Create new workspace\n  const createWorkspace = async () => {\n    if (!workspaceName.trim()) return;\n    try {\n      setShowCreateModal(false);\n      const newWs = await postWithAuth(\"/api/workSpace/create\", {\n        name: workspaceName,\n      });\n      localStorage.setItem(\"selectedWorkspaceName\", workspaceName);\n\n      // Encrypt workspaceId\n      const encrypted = CryptoJS.AES.encrypt(\n        JSON.stringify({ workspaceId: newWs._id }),\n        SECRET_KEY,\n      ).toString();\n\n      // Store encrypted token in cookie\n      document.cookie = `workspace=${encodeURIComponent(\n        encrypted,\n      )}; path=/; max-age=${60 * 60 * 24}; samesite=strict`;\n\n      router.push(`/notes`); // redirect to workspace page if needed\n    } catch (err) {\n      console.error(\"Error creating workspace:\", err);\n    }\n  };\n\n  // Join a workspace\n  const joinWorkspace = async (workspaceId: string, userEmail: string, workspaceMebers: Members[]) => {\n    const type = 'JOIN'\n    setJoining(workspaceId);\n    try {\n      const response = await postWithAuth('/api/notification/add', {\n        userEmail, \n        message: \"Request to join the Workspace\", \n        type,\n        workspaceId \n      })\n      \n      if (\"error\" in response || \"message\" in response) {\n        return null;\n      }\n      // 2️⃣ Send real-time socket notification\n      sendJoinRequest(response.notification, workspaceMebers);\n      \n      // ✅ Add workspace to requested list\n      setRequestedWorkspaces((prev) => [...prev, workspaceId]);\n      toast.success(\"Request to join workspace send successfully\");\n\n    } catch (err) {\n      console.error(\"Error joining workspace:\", err);\n      toast.error(err);\n    }\n    finally{\n      setJoining(null);\n    }\n  };\n\n\n\n  const sortedWorkspaces = React.useMemo(() => {\n    if (!user) return workspaces;\n  \n    const members = workspaces.filter(ws => isWorkspaceMember(ws, user.email));\n    const requested = workspaces.filter(ws => \n      ws.notifications?.some(n => n.requesterEmail === user.email) ||\n      requestedWorkspaces.includes(ws._id)\n    );\n\n    const others = workspaces.filter(ws => \n      !isWorkspaceMember(ws, user.email) &&\n      !(ws.notifications?.some(n => n.requesterEmail === user.email) || requestedWorkspaces.includes(ws._id))\n    );\n  \n    return [...members, ...requested, ...others];\n  }, [workspaces, user, requestedWorkspaces]);\n\n  useEffect(() => {\n    console.log(\"printing sorted Workspace\", sortedWorkspaces, workspaces)\n  },[sortedWorkspaces, workspaces])\n\n  useEffect(() => {\n    fetchWorkspaces();\n  }, [orgId]);\n\n  if (loading) {\n    return (\n      <div className=\"flex min-h-screen items-center justify-center\">\n        <Loader2 className=\"animate-spin w-10 h-10 text-primary\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen w-full flex flex-col items-center justify-start bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800 px-4 py-12\">\n\n      {/* Header + Create Button inline */}\n      <div className=\"w-full max-w-3xl flex items-center justify-between mb-6\">\n        <div className=\"flex items-center gap-4\">\n          <div className=\"inline-flex items-center justify-center w-16 h-16 rounded-full bg-primary/10\">\n            <Users className=\"w-8 h-8 text-primary\" />\n          </div>\n          <h1 className=\"text-4xl font-bold text-gray-900 dark:text-white\">Workspaces</h1>\n        </div>\n        <Button onClick={() => setShowCreateModal(true)} size=\"lg\">\n          Create New Workspace\n        </Button>\n      </div>\n\n      {/* Workspace List */}\n      <div className=\"w-full max-w-3xl space-y-4\">\n        {workspaces.length === 0 ? (\n          <p className=\"text-center text-gray-500 dark:text-gray-400\">\n            No workspace available yet\n          </p>\n        ) : (\n          workspaces.map((ws: Workspace) => {\n          let member;\n          if(user){\n            member = isWorkspaceMember(ws, user.email);\n          }\n\n          const members = ws.members || [];\n\n        return (\n          <div\n            key={ws._id}\n            className=\"flex justify-between items-center p-4 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 \n            shadow-sm hover:shadow-md transition-all duration-200 cursor-pointer\"            \n            onClick={() => {\n              if (member) {\n                // ✅ if already member → directly enter workspace\n                localStorage.setItem(\"selectedWorkspaceName\", ws.name);\n\n                const encrypted = CryptoJS.AES.encrypt(\n                  JSON.stringify({ workspaceId: ws._id }),\n                  SECRET_KEY,\n                ).toString();\n\n                document.cookie = `workspace=${encodeURIComponent(\n                  encrypted,\n                )}; path=/; max-age=${60 * 60 * 24}; samesite=strict`;\n\n                handleSelectedWorkspace(ws);\n                router.push(\"/notes\");\n              }\n            }}\n          >\n            {/* Workspace Name */}\n            <div className=\"flex-shrink-0 w-[33%]\">\n              <div className=\"flex items-center gap-3\">\n              <div className=\"truncate\">           \n                  <p className=\"font-medium text-lg text-gray-900 dark:text-white\">{ws.name}</p>\n                  <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                      Created {new Date(ws.createdAt).toLocaleDateString()}\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            {/* Member Avatars */}\n            <div className=\"flex-grow flex justify-center px-4 w-[33%]\">\n              {members.length > 0 ? (\n                <OverlappingAvatars members={members} maxVisible={3} />\n              ) : (\n                <span className=\"text-sm text-gray-500 dark:text-gray-400 italic\">\n                  No members yet\n                </span>\n              )}\n            </div>\n\n            {/* Join Button or Status */}\n            <div className=\"flex-shrink-0\">\n              {member ? (\n                <div className=\"flex items-center gap-2 px-4 py-2 text-green-700 dark:text-green-300 rounded-lg\">\n                  <ArrowRight className=\"w-5 h-5 font-medium\" />\n                </div>\n              ) : (\n                <div>\n                  {ws.notifications?.some((n) => n.requesterEmail === user?.email) || \n                    requestedWorkspaces.includes(ws._id)\n                    ? (\n                    <Button size=\"sm\" disabled>\n                      Requested\n                    </Button>\n                  ) : (\n                    <Button\n                      onClick={(e) => {\n                        e.stopPropagation(); // prevent triggering parent onClick\n                        if(user) joinWorkspace(ws._id, user.email, ws.members);\n                      }}\n                      size=\"sm\"\n                      disabled={joining === ws._id} // disable while loading\n                    >\n                    Join\n                    </Button>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n          );\n          })\n        )}\n      </div>\n\n      {/* Create Workspace Modal */}\n      {showCreateModal && (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40\">\n          <div className=\"bg-white dark:bg-gray-800 shadow-2xl rounded-2xl p-8 w-full max-w-md backdrop-blur-sm\">\n            <div className=\"flex flex-col gap-4\">\n              <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">Create Workspace</h2>\n              <Input\n                placeholder=\"Workspace Name\"\n                value={workspaceName}\n                onChange={(e) => setWorkspaceName(e.target.value)}\n                className=\"text-lg\"\n              />\n              <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                Your workspace will be where your team collaborates, organizes, and shares ideas.\n              </p>\n\n              <div className=\"flex justify-end gap-3 mt-2\">\n                <Button onClick={() => setShowCreateModal(false)} variant=\"outline\" size=\"lg\">\n                  Cancel\n                </Button>\n                <Button onClick={createWorkspace} size=\"lg\">\n                  Create\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"
          }
        ]
      }
    ]
  },
  "online_content_time": "2025-08-27T08:48:14.302Z"
}