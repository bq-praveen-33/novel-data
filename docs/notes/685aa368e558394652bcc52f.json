{
  "online_content": {
    "type": "doc",
    "content": [
      {
        "type": "codeBlock",
        "attrs": {
          "language": null
        },
        "content": [
          {
            "type": "text",
            "text": "\"use client\";\n\nimport { useAuth } from \"@/hooks/use-auth\";\nimport type { CachedNode, CachedNodes } from \"@/hooks/use-cachedNodes\";\nimport type { Node as CustomNode } from \"@/hooks/use-fetchRootData\";\nimport useRenderNode from \"@/hooks/use-renderNode\";\nimport clsx from \"clsx\";\nimport EmojiPicker, { Theme } from \"emoji-picker-react\";\nimport { ChevronsLeft, ChevronsRight, Copy, Edit, Loader2, Plus, Share2, Smile, Trash } from \"lucide-react\";\nimport { useRouter } from \"next/navigation\";\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport useRenderPublishNode from \"@/hooks/renderpublishPage\";\n\ninterface SidebarProps {\n  editorTitles: CustomNode[];\n  onAddEditor: (title: string, parentId?: string | null, icon?: string | null, isPublicNote?: boolean) => void;\n  onSelectEditor: (id: string) => void;\n  selectedEditor: string | null;\n  cachedChildNodes: CachedNodes;\n  setCachedChildNodes: React.Dispatch<React.SetStateAction<CachedNodes>>;\n  fetchAndCacheChildren: (id: string) => Promise<void>;\n  isOpen: boolean;\n  onClose: () => void;\n  onOpen: () => void;\n  onShare: (noteId: string) => void;\n  onupdateEditor: (id: string, title: string, parentId?: string | null, icon?: string | null) => void;\n  handleDeleteEditor?: (id: string) => void;\n}\n\n// Dropdown Tooltip component (positions below the button)\nconst DropdownTooltip = ({\n  children,\n  content,\n  disabled = false,\n}: { children: React.ReactNode; content: string; disabled?: boolean }) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const [position, setPosition] = useState({ top: 0, left: 0 });\n  const triggerRef = useRef<HTMLDivElement>(null);\n\n  if (disabled) return <>{children}</>;\n\n  const handleMouseEnter = () => {\n    if (triggerRef.current) {\n      const rect = triggerRef.current.getBoundingClientRect();\n      setPosition({\n        top: rect.bottom + 4,\n        left: rect.left + rect.width / 2,\n      });\n    }\n    setIsVisible(true);\n  };\n\n  const handleMouseLeave = () => {\n    setIsVisible(false);\n  };\n\n  return (\n    <div className=\"relative block w-full\">\n      <div ref={triggerRef} onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\n        {children}\n      </div>\n      {isVisible &&\n        typeof window !== \"undefined\" &&\n        createPortal(\n          <div\n            className=\"fixed px-2 py-1 text-xs text-white bg-gray-800 rounded whitespace-nowrap z-[9999] pointer-events-none\"\n            style={{\n              top: position.top,\n              left: position.left,\n              transform: \"translateX(-50%)\",\n            }}\n          >\n            {content}\n            <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-b-gray-800\" />\n          </div>,\n          document.body,\n        )}\n    </div>\n  );\n};\n\nexport function Sidebar({\n  editorTitles,\n  onAddEditor,\n  onSelectEditor,\n  selectedEditor,\n  cachedChildNodes,\n  setCachedChildNodes,\n  fetchAndCacheChildren,\n  isOpen,\n  onClose,\n  onOpen,\n  onShare,\n  onupdateEditor,\n  handleDeleteEditor,\n}: SidebarProps) {\n  const router = useRouter();\n  const { user } = useAuth();\n\n  // Function to check if current user owns a note\n  const isOwner = (noteUserId?: string, noteUserEmail?: string, isRootNote = false) => {\n    if (!user) return false;\n\n    // If we have user email, check it directly\n    if (noteUserEmail && user.email) {\n      return noteUserEmail === user.email;\n    }\n\n    // For root notes, if no user information is available, assume the current user owns it\n    // This handles cases where newly created notes might not have user info populated yet\n    if (!noteUserEmail && !noteUserId && isRootNote) return true;\n\n    // For child notes without user info, deny access\n    return false;\n  };\n\n  const [showModal, setShowModal] = useState(false);\n  const [newEditorTitle, setNewEditorTitle] = useState(\"\");\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [parentIdForNewPage, setParentIdForNewPage] = useState<string | null>(null);\n  const [openNodeIds, setOpenNodeIds] = useState<Set<string>>(new Set());\n  const [selectedEmoji, setSelectedEmoji] = useState<string>(\"\");\n\n  const [editData, setEditData] = useState<Record<string, unknown> | null>(null);\n  const [dropdownPosition, setDropdownPosition] = useState({ top: 0, left: 0 });\n  const [updateId, setupdateId] = useState<string | null>(null);\n  const [dropdownOpen, setdropdownOpen] = useState<boolean>(false);\n  const dropdownRef = useRef<HTMLDivElement | null>(null);\n  const [sidebarScrollPosition, setSidebarScrollPosition] = useState(0);\n  const sidebarRef = useRef<HTMLDivElement>(null);\n  const [isAdmin, setIsAdmin] = useState(false);\n\n  const [publishedPageisOpen, setPublishedPageisOpen] = useState(false);\n  const [reviewPageisOpen, setReviewPageisOpen] = useState(false);\n  const [sharedPageisOpen, setSharedPageisOpen] = useState(false);\n  const [pages, setPages] = useState([]);\n  const [isPublicPage, setisPublicPage] = useState(false);\n  const [confirmDeleteId, setConfirmDeleteId] = useState<string | null>(null);\n  const [confirmDeleteTitle, setConfirmDeleteTitle] = useState<string>(\"\");\n  const [isDeleting, setIsDeleting] = useState(false);\n\n  useEffect(() => {\n    const adminEmailsEnv = process.env.ADMINS || \"\";\n    const adminEmails = adminEmailsEnv.split(\",\").map((email) => email.trim().toLowerCase());\n\n    try {\n      const userString = window.localStorage.getItem(\"auth_user\");\n      const user = userString ? JSON.parse(userString) : null;\n      const email = user?.email;\n      if (email) {\n        // Store the current user's email in localStorage\n        localStorage.setItem(\"currentUserEmail\", email);\n        if (email && adminEmails.includes(email)) {\n          setIsAdmin(true);\n        }\n      }\n    } catch (error) {\n      console.error(\"Failed to parse user-auth from localStorage\", error);\n    }\n  }, []);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as HTMLElement)) {\n        setdropdownOpen(false);\n        setEditData(null);\n      }\n    };\n    if (dropdownOpen) {\n      document.addEventListener(\"mousedown\", handleClickOutside);\n    }\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [dropdownOpen]);\n\n  // function to handle dropdown toggle\n  const handleDropdownToggle = useCallback(\n    (e: React.MouseEvent, nodeId: CustomNode | CachedNode | null) => {\n      e.stopPropagation();\n      if (sidebarRef.current) {\n        setSidebarScrollPosition(sidebarRef.current.scrollTop);\n      }\n      setdropdownOpen(true);\n      if (nodeId) {\n        const rect = e.currentTarget.getBoundingClientRect();\n        const dropdownHeight = 200;\n        const windowHeight = window.innerHeight;\n        const positionBelow = rect.bottom + dropdownHeight <= windowHeight;\n\n        setDropdownPosition({\n          top: positionBelow ? rect.bottom + window.scrollY : rect.top + window.scrollY - dropdownHeight,\n          left: rect.left + window.scrollX,\n        });\n        setEditData(nodeId as unknown as Record<string, unknown>);\n      }\n    },\n    [editData],\n  );\n\n  // function to handle Dropdown Action\n  const handleDropdownAction = useCallback(\n    (action: string, Data: Record<string, unknown> | null) => {\n      setdropdownOpen(false);\n      if (action === \"rename\" && Data) {\n        setEditData(Data);\n        setParentIdForNewPage(Data.parentId as string);\n        setupdateId(Data.id as string);\n        setNewEditorTitle(Data.title as string);\n        setSelectedEmoji(Data.icon as string);\n        setShowModal(true);\n      }\n      if (action === \"share\" && Data) {\n        onShare(Data.id as string);\n        setEditData(null);\n      }\n      if (action === \"duplicate\" && Data) {\n        setEditData(null);\n      }\n      if (action === \"deletion\" && Data) {\n        setConfirmDeleteId(Data.id as string);\n        setConfirmDeleteTitle(Data.title as string);\n      }\n    },\n    [onShare],\n  );\n\n  const handleupdate = () => {\n    if (newEditorTitle.trim() && updateId) {\n      setIsLoading(true);\n      try {\n        onupdateEditor(updateId, newEditorTitle.trim(), parentIdForNewPage, selectedEmoji);\n      } finally {\n        setTimeout(() => {\n          setIsLoading(false);\n          setNewEditorTitle(\"\");\n          setSelectedEmoji(\"\");\n          setShowModal(false);\n          setParentIdForNewPage(null);\n          setEditData(null);\n        }, 800);\n      }\n    }\n  };\n\n  // Function to find the path from a node to root\n  const findPathToRoot = useCallback(\n    (nodeId: string, path: Set<string> = new Set()): Set<string> => {\n      path.add(nodeId);\n\n      // Look through all cached nodes to find the parent\n      for (const [parentId, children] of Object.entries(cachedChildNodes)) {\n        const isChild = children.some((child) => child.id === nodeId);\n        if (isChild) {\n          // Add this parent to the path and continue up the tree\n          return findPathToRoot(parentId, path);\n        }\n      }\n\n      // Also check root nodes\n      const rootNode = editorTitles.find((node) => node.children?.some((child) => child._id === nodeId));\n\n      if (rootNode) {\n        path.add(rootNode.id);\n      }\n\n      return path;\n    },\n    [cachedChildNodes, editorTitles],\n  );\n\n  // Expand the path to the selected node when it changes\n  useEffect(() => {\n    if (selectedEditor && selectedEditor !== \"notes\") {\n      // First, ensure we have the children of all root nodes\n      editorTitles.forEach((node) => {\n        if (node.children && node.children.length > 0 && !cachedChildNodes[node.id]) {\n          fetchAndCacheChildren(node.id);\n        }\n      });\n\n      // Find the path and expand all nodes in the path\n      const pathToRoot = findPathToRoot(selectedEditor);\n      setOpenNodeIds((prev) => {\n        const newSet = new Set(prev);\n        pathToRoot.forEach((id) => newSet.add(id));\n        return newSet;\n      });\n\n      // Ensure we fetch any missing nodes in the path\n      pathToRoot.forEach((id) => {\n        if (id && id !== \"notes\" && !cachedChildNodes[id]) {\n          fetchAndCacheChildren(id);\n        }\n      });\n    }\n  }, [selectedEditor, editorTitles, cachedChildNodes, fetchAndCacheChildren, findPathToRoot]);\n\n  const handleAdd = () => {\n    if (newEditorTitle.trim()) {\n      setIsLoading(true);\n      try {\n        onAddEditor(newEditorTitle.trim(), parentIdForNewPage, selectedEmoji, isPublicPage);\n      } finally {\n        // Allow a slight delay for a better UX\n        setTimeout(() => {\n          setIsLoading(false);\n          setNewEditorTitle(\"\");\n          setSelectedEmoji(\"\");\n          setShowModal(false);\n          setisPublicPage(false);\n        }, 800);\n      }\n    }\n  };\n\n  const toggleNode = useCallback(\n    (id: string) => {\n      setOpenNodeIds((prev) => {\n        const newSet = new Set(prev);\n        if (newSet.has(id)) {\n          newSet.delete(id);\n        } else {\n          newSet.add(id);\n          // If opening and not in cache, fetch children\n          if (!cachedChildNodes[id]) {\n            fetchAndCacheChildren(id);\n          }\n        }\n        return newSet;\n      });\n    },\n    [cachedChildNodes, fetchAndCacheChildren],\n  );\n\n  // Initial fetching of top-level nodes' children\n  useEffect(() => {\n    editorTitles.forEach((node) => {\n      if (node.children && node.children.length > 0 && !cachedChildNodes[node.id]) {\n        // Pre-cache children for root nodes\n        const children = node.children.map((child) => ({\n          id: child._id,\n          title: child.title,\n          parentId: node.id,\n          icon: child.icon || \"\",\n          children: [],\n          userId: child.userId,\n          userEmail: child.userEmail,\n        }));\n\n        setCachedChildNodes((prev) => ({\n          ...prev,\n          [node.id]: children,\n        }));\n      }\n    });\n  }, [editorTitles, cachedChildNodes, setCachedChildNodes]);\n\n  const handleNodeSelect = useCallback(\n    (id: string) => {\n      onSelectEditor(id);\n      router.push(`/notes/${id}`);\n    },\n    [onSelectEditor, router],\n  );\n\n  const toggleDropdownForSharedPage = async () => {\n    const nextOpen = !sharedPageisOpen;\n    setSharedPageisOpen(nextOpen);\n    // Reload data **only when opening**\n    if (nextOpen) {\n      const data: any = sharedPages;\n      setPages(data);\n    }\n  };\n\n  const toggleDropdownForReviewPage = async () => {\n    const nextOpen = !reviewPageisOpen;\n    setReviewPageisOpen(nextOpen);\n    // Reload data **only when opening**\n    if (nextOpen) {\n      const data: any = inReviewPages;\n      setPages(data);\n    }\n  };\n\n  const toggleDropdownForPublishedPage = async () => {\n    const nextOpen = !publishedPageisOpen;\n    setPublishedPageisOpen(nextOpen);\n    // Reload data **only when opening**\n    if (nextOpen) {\n      const data: any = publishedPages; // your API or fetch method\n      setPages(data);\n    }\n  };\n\n  const handleReorderRoot = async (ids: string[]) => {\n    try {\n      localStorage.setItem(\"rootOrder\", JSON.stringify({ ids, time: Date.now() }));\n\n      const cached = localStorage.getItem(\"rootNodes\");\n      if (cached) {\n        try {\n          const parsed = JSON.parse(cached) as CustomNode[];\n          const map = new Map(parsed.map((n: CustomNode) => [n.id, n]));\n          const ordered = ids.map((id) => map.get(id)).filter(Boolean) as CustomNode[];\n          const rest = parsed.filter((n: CustomNode) => !ids.includes(n.id));\n          localStorage.setItem(\"rootNodes\", JSON.stringify([...ordered, ...rest]));\n        } catch (e) {\n          // ignore corrupted cache\n        }\n      }\n\n      await fetch(\"/api/reorderRootNotes\", {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ orderedIds: ids }),\n      });\n    } catch (err) {\n      console.error(\"reorder failed\", err);\n    }\n  };\n\n  const NodeRenderer = ({\n    nodes,\n    onReorder,\n  }: {\n    nodes: CustomNode[];\n    onReorder: (ids: string[]) => void;\n  }) => {\n    const [ordered, setOrdered] = useState(nodes);\n    useEffect(() => setOrdered(nodes), [nodes]);\n\n    const dragItem = useRef<number | null>(null);\n    const dragOverItem = useRef<number | null>(null);\n    const [draggingIdx, setDraggingIdx] = useState<number | null>(null);\n\n    const handleDragEnd = () => {\n      if (dragItem.current === null || dragOverItem.current === null) {\n        setDraggingIdx(null);\n        return;\n      }\n      const updated = [...ordered];\n      const from = dragItem.current;\n      const to = dragOverItem.current as number;\n      const [moved] = updated.splice(from, 1);\n      if (!moved) return;\n      updated.splice(to, 0, moved);\n      dragItem.current = null;\n      dragOverItem.current = null;\n      setDraggingIdx(null);\n      setOrdered(updated);\n      onReorder(updated.map((n) => n.id));\n    };\n\n    const handleDragEnter = (index: number) => {\n      dragOverItem.current = index;\n      if (dragItem.current === null) return;\n      if (index === dragItem.current) return;\n      setOrdered((prev) => {\n        const updated = [...prev];\n        const [item] = updated.splice(dragItem.current as number, 1);\n        if (!item) return updated;\n        updated.splice(index, 0, item);\n        dragItem.current = index;\n        return updated;\n      });\n    };\n\n    const renderedNodes = useRenderNode({\n      editorTitles: ordered,\n      openNodeIds,\n      selectedEditor,\n      onSelectEditor: handleNodeSelect,\n      toggleNode,\n      onAddEditor: (parentId: string) => {\n        setParentIdForNewPage(parentId);\n        setShowModal(true);\n      },\n      cachedChildNodes,\n      setCachedChildNodes,\n      onDropdownToggle: handleDropdownToggle,\n    });\n\n    return (\n      <>\n        {renderedNodes.map((child, index) =>\n          React.cloneElement(child as React.ReactElement<any>, {\n            draggable: true,\n            onDragStart: () => {\n              dragItem.current = index;\n              setDraggingIdx(index);\n            },\n            onDragEnter: () => handleDragEnter(index),\n            onDragOver: (e: React.DragEvent) => e.preventDefault(),\n            onDragEnd: handleDragEnd,\n            className: clsx((child as React.ReactElement<any>).props.className, draggingIdx === index && \"opacity-50\"),\n          }),\n        )}\n      </>\n    );\n  };\n\n  const PublishNodeRenderer = ({ nodes }: { nodes: CustomNode[] }) => {\n    const renderedNodes = useRenderPublishNode({\n      editorTitles: nodes,\n      openNodeIds,\n      selectedEditor,\n      onSelectEditor: handleNodeSelect,\n      toggleNode,\n    });\n    return <>{renderedNodes}</>;\n  };\n\n  useEffect(() => {\n    return () => {\n      document.body.style.overflow = \"\";\n    };\n  }, []);\n\n  useEffect(() => {\n    const sidebar = sidebarRef.current;\n    if (!sidebar) return;\n\n    if (dropdownOpen) {\n      sidebar.style.overflowY = \"scroll\";\n      sidebar.style.pointerEvents = \"none\";\n      sidebar.scrollTop = sidebarScrollPosition;\n    } else {\n      sidebar.style.overflowY = \"auto\";\n      sidebar.style.pointerEvents = \"auto\";\n      sidebar.scrollTop = sidebarScrollPosition;\n    }\n  }, [dropdownOpen, sidebarScrollPosition]);\n\n  const privatePages = editorTitles.filter(\n    (entry) => entry.userEmail === user?.email && entry.isPublish === false && entry.isPublicNote === false,\n  );\n  const sharedPages = editorTitles.filter(\n    (entry) => entry.userEmail !== user?.email && entry.isPublish === false && entry.isPublicNote === false,\n  );\n  const Admin = false;\n\n  const inReviewPages = editorTitles.filter((entry) => entry.isPublish == true && entry.approvalStatus == \"pending\");\n  const publishedPages = editorTitles.filter((entry) => entry.isPublish == true && entry.approvalStatus == \"accepted\");\n\n  const publicPages = editorTitles.filter((entry) => entry.isPublicNote === true && entry.isPublish === false);\n\n  const ScrollableContainer = ({ children }: { children: React.ReactNode }) => {\n    return (\n      <div\n        className=\"overflow-y-auto\"\n        style={{\n          maxHeight: \"300px\",\n          scrollbarWidth: \"none\",\n          msOverflowStyle: \"none\",\n        }}\n      >\n        <style jsx>{`\n          div::-webkit-scrollbar {\n            display: none;\n          }\n        `}</style>\n        {children}\n      </div>\n    );\n  };\n\n  return (\n    <>\n      {isOpen && (\n        <div\n          className=\"fixed inset-0 bg-black/40 z-40 lg:hidden\"\n          onClick={onClose}\n          onKeyDown={(e) => {\n            if (e.key === \"Escape\") onClose();\n          }}\n          role=\"button\"\n          tabIndex={0}\n        />\n      )}\n\n      {/* Sidebar */}\n      <aside\n        className={clsx(\n          \"fixed top-0 bottom-0 z-50 w-[18rem] bg-white dark:bg-zinc-900 shadow-lg transition-transform transform\",\n          {\n            \"-translate-x-full\": !isOpen,\n            \"translate-x-0\": isOpen,\n          },\n        )}\n      >\n        <div ref={sidebarRef} className=\"absolute inset-0 z-10 overflow-auto pr-4 pb-10\">\n          <div className=\"flex justify-end p-4 \">\n            <button\n              type=\"button\"\n              className=\" p-2   border  border-gray-200 dark:border-gray-600 rounded-lg\"\n              onClick={onClose}\n            >\n              <ChevronsLeft className=\"w-5 h-5 text-gray-800 dark:text-gray-200\" />\n            </button>\n          </div>\n\n          {/*Render Public Pages */}\n          <div className=\"relative text-sm leading-5 mb-8 \">\n            <div className=\"flex items-center justify-between \">\n              <span className=\"pl-5 font-semibold text-sm text-gray-600 dark:text-gray-200\">Public Pages</span>\n              <button\n                type=\"button\"\n                className=\"p-1 hover:bg-gray-200 dark:hover:bg-zinc-700 rounded sidebar-add-button\"\n                onClick={() => {\n                  setParentIdForNewPage(null);\n                  setShowModal(true);\n                  setisPublicPage(true);\n                }}\n              >\n                <Plus className=\"w-6 h-6 text-gray-600 dark:text-gray-300\" />\n              </button>\n            </div>\n            <ScrollableContainer>\n              <ul className=\"space-y-4 mt-4 pl-4\" id=\"navigation-items\">\n                <NodeRenderer nodes={publicPages} onReorder={handleReorderRoot} />\n              </ul>\n            </ScrollableContainer>\n          </div>\n\n          {/*Render Private Pages */}\n          <div className=\"relative text-sm leading-5 mb-8 \">\n            <div className=\"flex items-center justify-between \">\n              <span className=\"pl-5 font-semibold text-sm text-gray-600 dark:text-gray-200\">Private Pages</span>\n              <button\n                type=\"button\"\n                className=\"p-1 hover:bg-gray-200 dark:hover:bg-zinc-700 rounded sidebar-add-button\"\n                onClick={() => {\n                  setParentIdForNewPage(null);\n                  setShowModal(true);\n                  setisPublicPage(false);\n                }}\n              >\n                <Plus className=\"w-6 h-6 text-gray-600 dark:text-gray-300\" />\n              </button>\n            </div>\n            <ScrollableContainer>\n              <ul className=\"space-y-4 mt-4 pl-4\" id=\"navigation-items\">\n                <NodeRenderer nodes={privatePages} onReorder={handleReorderRoot} />\n              </ul>\n            </ScrollableContainer>\n          </div>\n\n          {/*Render shared Pages */}\n\n          <div className=\"relative text-sm leading-5 mb-8\">\n            <div\n              className=\"flex items-center gap-2 cursor-pointer hover:bg-muted/30 py-2 px-4 rounded-md\"\n              onClick={toggleDropdownForSharedPage}\n            >\n              <ChevronsRight\n                className={`w-4 h-4 text-gray-400 transition-transform duration-300 ${\n                  sharedPageisOpen ? \"rotate-90\" : \"\"\n                }`}\n              />\n              <span className=\"font-semibold text-sm text-gray-600 dark:text-gray-200\">Shared pages</span>\n            </div>\n\n            {sharedPageisOpen && (\n              <>\n                <ScrollableContainer>\n                  <ul className=\"space-y-4 mt-4 pl-4\" id=\"navigation-items\">\n                    <NodeRenderer nodes={sharedPages} onReorder={handleReorderRoot} />\n                  </ul>\n                </ScrollableContainer>\n              </>\n            )}\n          </div>\n\n          {/*Render inReview Pages */}\n          {isAdmin && (\n            <div className=\"relative text-sm leading-5 mb-8\">\n              <div\n                className=\"flex items-center gap-2 cursor-pointer hover:bg-muted/30 py-2 px-4 rounded-md\"\n                onClick={toggleDropdownForReviewPage}\n              >\n                <ChevronsRight\n                  className={`w-4 h-4 text-gray-400 transition-transform duration-300 ${\n                    reviewPageisOpen ? \"rotate-90\" : \"\"\n                  }`}\n                />\n                <span className=\"font-semibold text-sm text-gray-600 dark:text-gray-200\">Review pages</span>\n              </div>\n\n              {reviewPageisOpen && (\n                <>\n                  <ScrollableContainer>\n                    <ul className=\"space-y-4 mt-4 pl-4\" id=\"navigation-items\">\n                      <PublishNodeRenderer nodes={inReviewPages} />\n                    </ul>\n                  </ScrollableContainer>\n                </>\n              )}\n            </div>\n          )}\n\n          {/*Render published Pages */}\n          {isAdmin && (\n            <div className=\"relative text-sm leading-5 mb-8\">\n              <div\n                className=\"flex items-center gap-2 cursor-pointer hover:bg-muted/30 py-2 px-4 rounded-md\"\n                onClick={toggleDropdownForPublishedPage}\n              >\n                <ChevronsRight\n                  className={`w-4 h-4 text-gray-400 transition-transform duration-300 ${\n                    publishedPageisOpen ? \"rotate-90\" : \"\"\n                  }`}\n                />\n                <span className=\"font-semibold text-sm text-gray-600 dark:text-gray-200\">Published pages</span>\n              </div>\n\n              {publishedPageisOpen && (\n                <>\n                  <ScrollableContainer>\n                    <ul className=\"space-y-4 mt-4 pl-4\" id=\"navigation-items\">\n                      <PublishNodeRenderer nodes={publishedPages} />\n                    </ul>\n                  </ScrollableContainer>\n                </>\n              )}\n            </div>\n          )}\n\n          {/* Page creation loader at the bottom of sidebar */}\n          {isLoading && (\n            <div className=\"absolute bottom-0 left-0 right-0 bg-gray-50 dark:bg-zinc-800/50 p-3 border-t border-gray-200 dark:border-zinc-700\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"relative w-4 h-4\">\n                  <div className=\"absolute inset-0 border-2 border-gray-400 dark:border-gray-500 border-t-transparent rounded-full animate-spin\" />\n                </div>\n                <span className=\"text-sm font-medium text-gray-600 dark:text-gray-300\">Creating page...</span>\n              </div>\n              <div className=\"mt-2 flex items-center gap-2 py-2 px-3 bg-white dark:bg-zinc-800 rounded border border-gray-200 dark:border-zinc-700\">\n                <div className=\"w-4 h-4 bg-gray-200 dark:bg-zinc-700 rounded-sm opacity-75\" />\n                <div className=\"h-2 w-24 bg-gray-200 dark:bg-zinc-700 rounded animate-pulse\" />\n              </div>\n            </div>\n          )}\n        </div>\n      </aside>\n\n      {/* Modal */}\n      {showModal && (\n        <div className=\"fixed inset-0 z-50 bg-black/50 flex items-center justify-center\">\n          <div className=\"bg-white dark:bg-zinc-800 p-6 rounded-lg shadow-lg w-[400px] max-w-full\">\n            <h2 className=\"text-lg font-semibold mb-4 text-gray-900 dark:text-white\">\n              {editData ? \"Update Page\" : \"Add New Page\"}\n            </h2>\n            <div className=\"flex items-center mb-4 relative\">\n              <input\n                type=\"text\"\n                placeholder=\"Enter title\"\n                value={newEditorTitle}\n                onChange={(e) => setNewEditorTitle(e.target.value)}\n                onKeyDown={(e) => {\n                  if (e.key === \"Enter\") {\n                    e.preventDefault();\n                    if (!isLoading) {\n                      editData ? handleupdate() : handleAdd();\n                    }\n                  }\n                }}\n                className=\"w-full p-2 rounded border border-gray-300 dark:border-zinc-700 bg-white dark:bg-zinc-900 text-gray-900 dark:text-white pl-10\"\n              />\n              <div className=\"absolute left-2 flex items-center\">\n                {selectedEmoji ? (\n                  <span\n                    className=\"text-xl cursor-pointer\"\n                    onClick={() => setShowEmojiPicker(!showEmojiPicker)}\n                    onKeyDown={(e) => {\n                      if (e.key === \"Enter\") setShowEmojiPicker(!showEmojiPicker);\n                    }}\n                  >\n                    {selectedEmoji}\n                  </span>\n                ) : (\n                  <Smile\n                    className=\"w-5 h-5 text-gray-500 cursor-pointer\"\n                    onClick={() => setShowEmojiPicker(!showEmojiPicker)}\n                  />\n                )}\n              </div>\n\n              {showEmojiPicker && (\n                <div className=\"absolute z-10 top-full left-0 mt-1\">\n                  <EmojiPicker\n                    onEmojiClick={(emojiData) => {\n                      setSelectedEmoji(emojiData.emoji);\n                      setShowEmojiPicker(false);\n                    }}\n                    height={350}\n                    width={300}\n                    theme={window.localStorage.getItem(\"theme\") === \"dark\" ? Theme.DARK : Theme.LIGHT}\n                  />\n                </div>\n              )}\n            </div>\n\n            <div className=\"flex justify-end gap-2\">\n              <button\n                type=\"button\"\n                className=\"px-3 py-1 text-sm rounded bg-gray-200 dark:bg-zinc-700 text-gray-800 dark:text-white\"\n                onClick={() => {\n                  setShowModal(false);\n                  setEditData(null);\n                  setNewEditorTitle(\"\");\n                  setSelectedEmoji(\"\");\n                  setParentIdForNewPage(null);\n                  setisPublicPage(false);\n                }}\n                disabled={isLoading}\n              >\n                Cancel\n              </button>\n              <button\n                type=\"button\"\n                className=\"px-3 py-1 text-sm rounded bg-blue-600 text-white flex items-center justify-center min-w-[60px]\"\n                onClick={editData ? handleupdate : handleAdd}\n                disabled={isLoading}\n              >\n                {isLoading ? <Loader2 className=\"w-4 h-4 animate-spin\" /> : editData ? \"Update\" : \"Add\"}\n              </button>\n            </div>\n\n            {/* Small loader overlay */}\n            {isLoading && (\n              <div className=\"absolute top-2 right-2 flex items-center gap-2 text-sm text-blue-600 dark:text-blue-400 animate-pulse\">\n                <Loader2 className=\"w-4 h-4 animate-spin\" />\n                <span>Creating page...</span>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n      {/*Deletion Modal */}\n      {confirmDeleteId && (\n        <div className=\"fixed inset-0 z-50 bg-black/50 flex items-center justify-center\">\n          <div className=\"bg-white dark:bg-zinc-800 p-6 rounded-lg shadow-lg w-[400px] max-w-full\">\n            <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">Confirm Deletion</h2>\n            <p className=\"text-sm text-gray-700 dark:text-gray-300 mb-6\">\n              Are you sure you want to delete the note titled <strong>{confirmDeleteTitle}</strong>?\n            </p>\n            <div className=\"flex justify-end gap-3\">\n              <button\n                className=\"px-4 py-2 text-sm bg-gray-200 dark:bg-zinc-700 text-gray-800 dark:text-white rounded\"\n                onClick={() => {\n                  setConfirmDeleteId(null);\n                  setConfirmDeleteTitle(\"\");\n                }}\n              >\n                Cancel\n              </button>\n              <button\n                className=\"px-4 py-2 text-sm bg-red-600 text-white rounded hover:bg-red-700\"\n                onClick={async () => {\n                  if (handleDeleteEditor && confirmDeleteId) {\n                    setIsDeleting(true); // ⬅️ Show full page loader\n                    setConfirmDeleteId(null);\n                    setConfirmDeleteTitle(\"\");\n\n                    try {\n                      await handleDeleteEditor(confirmDeleteId); // await in case it's async\n                    } catch (err) {\n                      console.error(\"Error deleting editor:\", err);\n                    } finally {\n                      setIsDeleting(false); // ⬅️ Hide loader\n                    }\n                  }\n                }}\n              >\n                Delete\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/*dropdown model */}\n      {dropdownOpen && (\n        <div\n          ref={dropdownRef}\n          className=\"fixed w-60 bg-white dark:bg-zinc-800 rounded-md shadow-lg z-50 border border-gray-200 dark:border-zinc-700\"\n          style={{\n            top: `${Math.max(0, dropdownPosition.top)}px`,\n            left: `${dropdownPosition.left}px`,\n            maxHeight: \"calc(100vh - 20px)\",\n            overflowY: \"auto\",\n          }}\n          onClick={(e) => e.stopPropagation()}\n          onKeyDown={(e) => {\n            if (e.key === \"Escape\") {\n              setdropdownOpen(false);\n            }\n          }}\n          role=\"menu\"\n          tabIndex={-1}\n        >\n          <div className=\"py-2\">\n            <div className=\" flex items-center gap-2 w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-300\">\n              {editData ? (editData?.title as string) : \"page\"}\n            </div>\n            <hr />\n            {(() => {\n              const userOwnsNote = isOwner(editData?.userId as string, editData?.userEmail as string, false);\n\n              return (\n                <>\n                  <DropdownTooltip content=\"You are not the owner of this note\" disabled={userOwnsNote}>\n                    <div className=\"w-full\">\n                      <button\n                        type=\"button\"\n                        onClick={() => userOwnsNote && handleDropdownAction(\"rename\", editData)}\n                        disabled={!userOwnsNote}\n                        className={`flex items-center gap-4 w-full text-left px-4 py-2 text-sm transition-colors ${\n                          userOwnsNote\n                            ? \"text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-zinc-700 cursor-pointer\"\n                            : \"text-gray-400 dark:text-gray-500 cursor-not-allowed\"\n                        }`}\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                        Rename\n                      </button>\n                    </div>\n                  </DropdownTooltip>\n\n                  {!editData?.isPublicNote && (\n                    <DropdownTooltip content=\"You are not the owner of this note\" disabled={userOwnsNote}>\n                      <div className=\"w-full\">\n                        <button\n                          type=\"button\"\n                          onClick={() => userOwnsNote && handleDropdownAction(\"share\", editData)}\n                          disabled={!userOwnsNote}\n                          className={`flex items-center gap-4 w-full text-left px-4 py-2 text-sm transition-colors ${\n                            userOwnsNote\n                              ? \"text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-zinc-700 cursor-pointer\"\n                              : \"text-gray-400 dark:text-gray-500 cursor-not-allowed\"\n                          }`}\n                        >\n                          <Share2 className=\"h-4 w-4\" />\n                          Share\n                        </button>\n                      </div>\n                    </DropdownTooltip>\n                  )}\n\n                  <DropdownTooltip content=\"You are not the owner of this note\" disabled={userOwnsNote}>\n                    <div className=\"w-full\">\n                      <button\n                        type=\"button\"\n                        onClick={() => userOwnsNote && handleDropdownAction(\"duplicate\", editData)}\n                        disabled={!userOwnsNote}\n                        className={`flex items-center gap-4 w-full text-left px-4 py-2 text-sm transition-colors ${\n                          userOwnsNote\n                            ? \"text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-zinc-700 cursor-pointer\"\n                            : \"text-gray-400 dark:text-gray-500 cursor-not-allowed\"\n                        }`}\n                      >\n                        <Copy className=\"h-4 w-4\" />\n                        Duplicate\n                      </button>\n                    </div>\n                  </DropdownTooltip>\n                  <DropdownTooltip content=\"You are not the owner of this note\" disabled={userOwnsNote}>\n                    <div className=\"w-full\">\n                      <button\n                        type=\"button\"\n                        onClick={() => userOwnsNote && handleDropdownAction(\"deletion\", editData)}\n                        disabled={!userOwnsNote}\n                        className={`flex items-center gap-4 w-full text-left px-4 py-2 text-sm transition-colors ${\n                          userOwnsNote\n                            ? \"text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-zinc-700 cursor-pointer\"\n                            : \"text-gray-400 dark:text-gray-500 cursor-not-allowed\"\n                        }`}\n                      >\n                        <Trash className=\"h-4 w-4\" />\n                        Delete\n                      </button>\n                    </div>\n                  </DropdownTooltip>\n                </>\n              );\n            })()}\n          </div>\n        </div>\n      )}\n      {/* Loader overlay for deletion */}\n      {isDeleting && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-[9999]\">\n          <div className=\"flex items-center gap-2 text-white text-lg\">\n            <Loader2 className=\"w-6 h-6 animate-spin\" />\n            Deleting page...\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n"
          }
        ]
      }
    ]
  },
  "online_content_time": "2025-06-24T13:17:03.656Z"
}