{
  "online_content": {
    "type": "doc",
    "content": [
      {
        "type": "heading",
        "attrs": {
          "level": 2
        },
        "content": [
          {
            "type": "text",
            "marks": [
              {
                "type": "link",
                "attrs": {
                  "href": "https://nodejs.org/en/learn/asynchronous-work/event-loop-timers-and-nexttick#what-is-the-event-loop",
                  "target": "_blank",
                  "rel": "noopener noreferrer nofollow",
                  "class": "text-muted-foreground underline underline-offset-[3px] hover:text-primary transition-colors cursor-pointer"
                }
              },
              {
                "type": "bold"
              }
            ],
            "text": "What is the Event Loop?"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "The event loop is what allows Node.js to perform non-blocking I/O operations — despite the fact that a single JavaScript thread is used by default — by offloading operations to the system kernel whenever possible."
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "Since most modern kernels are multi-threaded, they can handle multiple operations executing in the background. When one of these operations completes, the kernel tells Node.js so that the appropriate callback may be added to the "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "poll"
          },
          {
            "type": "text",
            "text": " queue to eventually be executed. We'll explain this in further detail later in this topic."
          }
        ]
      },
      {
        "type": "heading",
        "attrs": {
          "level": 2
        },
        "content": [
          {
            "type": "text",
            "marks": [
              {
                "type": "link",
                "attrs": {
                  "href": "https://nodejs.org/en/learn/asynchronous-work/event-loop-timers-and-nexttick#event-loop-explained",
                  "target": "_blank",
                  "rel": "noopener noreferrer nofollow",
                  "class": "text-muted-foreground underline underline-offset-[3px] hover:text-primary transition-colors cursor-pointer"
                }
              },
              {
                "type": "bold"
              }
            ],
            "text": "Event Loop Explained"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "When Node.js starts, it initializes the event loop, processes the provided input script (or drops into the "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "link",
                "attrs": {
                  "href": "https://nodejs.org/api/repl.html#repl_repl",
                  "target": "_blank",
                  "rel": "noopener noreferrer nofollow",
                  "class": "text-muted-foreground underline underline-offset-[3px] hover:text-primary transition-colors cursor-pointer"
                }
              }
            ],
            "text": "REPL"
          },
          {
            "type": "text",
            "text": ", which is not covered in this document) which may make async API calls, schedule timers, or call "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "process.nextTick()"
          },
          {
            "type": "text",
            "text": ", then begins processing the event loop."
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "The following diagram shows a simplified overview of the event loop's order of operations."
          }
        ]
      },
      {
        "type": "codeBlock",
        "attrs": {
          "language": null
        },
        "content": [
          {
            "type": "text",
            "text": "   ┌───────────────────────────┐┌─>│           timers          ││  └─────────────┬─────────────┘│  ┌─────────────┴─────────────┐│  │     pending callbacks     ││  └─────────────┬─────────────┘│  ┌─────────────┴─────────────┐│  │       idle, prepare       ││  └─────────────┬─────────────┘      ┌───────────────┐│  ┌─────────────┴─────────────┐      │   incoming:   ││  │           poll            │<─────┤  connections, ││  └─────────────┬─────────────┘      │   data, etc.  ││  ┌─────────────┴─────────────┐      └───────────────┘│  │           check           ││  └─────────────┬─────────────┘│  ┌─────────────┴─────────────┐└──┤      close callbacks      │   └───────────────────────────┘"
          }
        ]
      },
      {
        "type": "blockquote",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Each box will be referred to as a \"phase\" of the event loop."
              }
            ]
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "Each phase has a FIFO queue of callbacks to execute. While each phase is special in its own way, generally, when the event loop enters a given phase, it will perform any operations specific to that phase, then execute callbacks in that phase's queue until the queue has been exhausted or the maximum number of callbacks has executed. When the queue has been exhausted or the callback limit is reached, the event loop will move to the next phase, and so on."
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "Since any of these operations may schedule "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "italic"
              }
            ],
            "text": "more"
          },
          {
            "type": "text",
            "text": " operations and new events processed in the "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "poll"
          },
          {
            "type": "text",
            "text": " phase are queued by the kernel, poll events can be queued while polling events are being processed. As a result, long running callbacks can allow the poll phase to run much longer than a timer's threshold. See the "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "link",
                "attrs": {
                  "href": "https://nodejs.org/en/learn/asynchronous-work/event-loop-timers-and-nexttick#timers",
                  "target": "_blank",
                  "rel": "noopener noreferrer nofollow",
                  "class": "text-muted-foreground underline underline-offset-[3px] hover:text-primary transition-colors cursor-pointer"
                }
              },
              {
                "type": "bold"
              }
            ],
            "text": "timers"
          },
          {
            "type": "text",
            "text": " and "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "link",
                "attrs": {
                  "href": "https://nodejs.org/en/learn/asynchronous-work/event-loop-timers-and-nexttick#poll",
                  "target": "_blank",
                  "rel": "noopener noreferrer nofollow",
                  "class": "text-muted-foreground underline underline-offset-[3px] hover:text-primary transition-colors cursor-pointer"
                }
              },
              {
                "type": "bold"
              }
            ],
            "text": "poll"
          },
          {
            "type": "text",
            "text": " sections for more details."
          }
        ]
      },
      {
        "type": "blockquote",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "There is a slight discrepancy between the Windows and the Unix/Linux implementation, but that's not important for this demonstration. The most important parts are here. There are actually seven or eight steps, but the ones we care about — ones that Node.js actually uses - are those above."
              }
            ]
          }
        ]
      },
      {
        "type": "heading",
        "attrs": {
          "level": 2
        },
        "content": [
          {
            "type": "text",
            "marks": [
              {
                "type": "link",
                "attrs": {
                  "href": "https://nodejs.org/en/learn/asynchronous-work/event-loop-timers-and-nexttick#phases-overview",
                  "target": "_blank",
                  "rel": "noopener noreferrer nofollow",
                  "class": "text-muted-foreground underline underline-offset-[3px] hover:text-primary transition-colors cursor-pointer"
                }
              },
              {
                "type": "bold"
              }
            ],
            "text": "Phases Overview"
          }
        ]
      },
      {
        "type": "bulletList",
        "attrs": {
          "tight": true
        },
        "content": [
          {
            "type": "listItem",
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "text": "timers"
                  },
                  {
                    "type": "text",
                    "text": ": this phase executes callbacks scheduled by "
                  },
                  {
                    "type": "text",
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "text": "setTimeout()"
                  },
                  {
                    "type": "text",
                    "text": " and "
                  },
                  {
                    "type": "text",
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "text": "setInterval()"
                  },
                  {
                    "type": "text",
                    "text": "."
                  }
                ]
              }
            ]
          },
          {
            "type": "listItem",
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "text": "pending callbacks"
                  },
                  {
                    "type": "text",
                    "text": ": executes I/O callbacks deferred to the next loop iteration."
                  }
                ]
              }
            ]
          },
          {
            "type": "listItem",
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "text": "idle, prepare"
                  },
                  {
                    "type": "text",
                    "text": ": only used internally."
                  }
                ]
              }
            ]
          },
          {
            "type": "listItem",
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "text": "poll"
                  },
                  {
                    "type": "text",
                    "text": ": retrieve new I/O events; execute I/O related callbacks (almost all with the exception of close callbacks, the ones scheduled by timers, and "
                  },
                  {
                    "type": "text",
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "text": "setImmediate()"
                  },
                  {
                    "type": "text",
                    "text": "); node will block here when appropriate."
                  }
                ]
              }
            ]
          },
          {
            "type": "listItem",
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "text": "check"
                  },
                  {
                    "type": "text",
                    "text": ": "
                  },
                  {
                    "type": "text",
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "text": "setImmediate()"
                  },
                  {
                    "type": "text",
                    "text": " callbacks are invoked here."
                  }
                ]
              }
            ]
          },
          {
            "type": "listItem",
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "text": "close callbacks"
                  },
                  {
                    "type": "text",
                    "text": ": some close callbacks, e.g. "
                  },
                  {
                    "type": "text",
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "text": "socket.on('close', ...)"
                  },
                  {
                    "type": "text",
                    "text": "."
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "Between each run of the event loop, Node.js checks if it is waiting for any asynchronous I/O or timers and shuts down cleanly if there are not any."
          }
        ]
      },
      {
        "type": "heading",
        "attrs": {
          "level": 2
        },
        "content": [
          {
            "type": "text",
            "marks": [
              {
                "type": "link",
                "attrs": {
                  "href": "https://nodejs.org/en/learn/asynchronous-work/event-loop-timers-and-nexttick#phases-in-detail",
                  "target": "_blank",
                  "rel": "noopener noreferrer nofollow",
                  "class": "text-muted-foreground underline underline-offset-[3px] hover:text-primary transition-colors cursor-pointer"
                }
              },
              {
                "type": "bold"
              }
            ],
            "text": "Phases in Detail"
          }
        ]
      },
      {
        "type": "heading",
        "attrs": {
          "level": 3
        },
        "content": [
          {
            "type": "text",
            "marks": [
              {
                "type": "link",
                "attrs": {
                  "href": "https://nodejs.org/en/learn/asynchronous-work/event-loop-timers-and-nexttick#timers",
                  "target": "_blank",
                  "rel": "noopener noreferrer nofollow",
                  "class": "text-muted-foreground underline underline-offset-[3px] hover:text-primary transition-colors cursor-pointer"
                }
              },
              {
                "type": "bold"
              }
            ],
            "text": "timers"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "A timer specifies the "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "threshold"
          },
          {
            "type": "text",
            "text": " "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "italic"
              }
            ],
            "text": "after which"
          },
          {
            "type": "text",
            "text": " a provided callback "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "italic"
              }
            ],
            "text": "may be executed"
          },
          {
            "type": "text",
            "text": " rather than the "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "exact"
          },
          {
            "type": "text",
            "text": " time a person "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "italic"
              }
            ],
            "text": "wants it to be executed"
          },
          {
            "type": "text",
            "text": ". Timers callbacks will run as early as they can be scheduled after the specified amount of time has passed; however, Operating System scheduling or the running of other callbacks may delay them."
          }
        ]
      },
      {
        "type": "blockquote",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "Technically, the "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "link",
                    "attrs": {
                      "href": "https://nodejs.org/en/learn/asynchronous-work/event-loop-timers-and-nexttick#poll",
                      "target": "_blank",
                      "rel": "noopener noreferrer nofollow",
                      "class": "text-muted-foreground underline underline-offset-[3px] hover:text-primary transition-colors cursor-pointer"
                    }
                  },
                  {
                    "type": "bold"
                  }
                ],
                "text": "poll phase"
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": " controls when timers are executed."
              }
            ]
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "For example, say you schedule a timeout to execute after a 100 ms threshold, then your script starts asynchronously reading a file which takes 95 ms:"
          }
        ]
      },
      {
        "type": "codeBlock",
        "attrs": {
          "language": null
        },
        "content": [
          {
            "type": "text",
            "text": "const fs = require('node:fs');function someAsyncOperation(callback) {  // Assume this takes 95ms to complete  fs.readFile('/path/to/file', callback);}const timeoutScheduled = Date.now();setTimeout(() => {  const delay = Date.now() - timeoutScheduled;  console.log(`${delay}ms have passed since I was scheduled`);}, 100);// do someAsyncOperation which takes 95 ms to completesomeAsyncOperation(() => {  const startCallback = Date.now();  // do something that will take 10ms...  while (Date.now() - startCallback < 10) {    // do nothing  }});"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "marks": [
              {
                "type": "textStyle",
                "attrs": {
                  "color": "rgb(203, 212, 217)"
                }
              },
              {
                "type": "bold"
              }
            ],
            "text": "JavaScript"
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "Copy to clipboard"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "When the event loop enters the "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "poll"
          },
          {
            "type": "text",
            "text": " phase, it has an empty queue ("
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "fs.readFile()"
          },
          {
            "type": "text",
            "text": " has not completed), so it will wait for the number of ms remaining until the soonest timer's threshold is reached. While it is waiting 95 ms pass, "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "fs.readFile()"
          },
          {
            "type": "text",
            "text": " finishes reading the file and its callback which takes 10 ms to complete is added to the "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "poll"
          },
          {
            "type": "text",
            "text": " queue and executed. When the callback finishes, there are no more callbacks in the queue, so the event loop will see that the threshold of the soonest timer has been reached then wrap back to the "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "timers"
          },
          {
            "type": "text",
            "text": " phase to execute the timer's callback. In this example, you will see that the total delay between the timer being scheduled and its callback being executed will be 105ms."
          }
        ]
      },
      {
        "type": "blockquote",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "To prevent the poll phase from starving the event loop, "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "link",
                    "attrs": {
                      "href": "https://libuv.org/",
                      "target": "_blank",
                      "rel": "noopener noreferrer nofollow",
                      "class": "text-muted-foreground underline underline-offset-[3px] hover:text-primary transition-colors cursor-pointer"
                    }
                  },
                  {
                    "type": "bold"
                  }
                ],
                "text": "libuv"
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": " (the C library that implements the Node.js event loop and all of the asynchronous behaviors of the platform) also has a hard maximum (system dependent) before it stops polling for more events."
              }
            ]
          }
        ]
      },
      {
        "type": "heading",
        "attrs": {
          "level": 3
        },
        "content": [
          {
            "type": "text",
            "marks": [
              {
                "type": "link",
                "attrs": {
                  "href": "https://nodejs.org/en/learn/asynchronous-work/event-loop-timers-and-nexttick#pending-callbacks",
                  "target": "_blank",
                  "rel": "noopener noreferrer nofollow",
                  "class": "text-muted-foreground underline underline-offset-[3px] hover:text-primary transition-colors cursor-pointer"
                }
              },
              {
                "type": "bold"
              }
            ],
            "text": "pending callbacks"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "This phase executes callbacks for some system operations such as types of TCP errors. For example if a TCP socket receives "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "ECONNREFUSED"
          },
          {
            "type": "text",
            "text": " when attempting to connect, some *nix systems want to wait to report the error. This will be queued to execute in the "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "pending callbacks"
          },
          {
            "type": "text",
            "text": " phase."
          }
        ]
      },
      {
        "type": "heading",
        "attrs": {
          "level": 3
        },
        "content": [
          {
            "type": "text",
            "marks": [
              {
                "type": "link",
                "attrs": {
                  "href": "https://nodejs.org/en/learn/asynchronous-work/event-loop-timers-and-nexttick#poll",
                  "target": "_blank",
                  "rel": "noopener noreferrer nofollow",
                  "class": "text-muted-foreground underline underline-offset-[3px] hover:text-primary transition-colors cursor-pointer"
                }
              },
              {
                "type": "bold"
              }
            ],
            "text": "poll"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "The "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "poll"
          },
          {
            "type": "text",
            "text": " phase has two main functions:"
          }
        ]
      },
      {
        "type": "orderedList",
        "attrs": {
          "tight": true,
          "start": 1,
          "type": null
        },
        "content": [
          {
            "type": "listItem",
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "text": "Calculating how long it should block and poll for I/O, then"
                  }
                ]
              }
            ]
          },
          {
            "type": "listItem",
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "text": "Processing events in the "
                  },
                  {
                    "type": "text",
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "text": "poll"
                  },
                  {
                    "type": "text",
                    "text": " queue."
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "When the event loop enters the "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "poll"
          },
          {
            "type": "text",
            "text": " phase "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "italic"
              }
            ],
            "text": "and there are no timers scheduled"
          },
          {
            "type": "text",
            "text": ", one of two things will happen:"
          }
        ]
      },
      {
        "type": "bulletList",
        "attrs": {
          "tight": false
        },
        "content": [
          {
            "type": "listItem",
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "text": "If the "
                  },
                  {
                    "type": "text",
                    "marks": [
                      {
                        "type": "bold"
                      },
                      {
                        "type": "italic"
                      }
                    ],
                    "text": "poll"
                  },
                  {
                    "type": "text",
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "text": " queue "
                  },
                  {
                    "type": "text",
                    "marks": [
                      {
                        "type": "bold"
                      },
                      {
                        "type": "italic"
                      }
                    ],
                    "text": "is not empty"
                  },
                  {
                    "type": "text",
                    "text": ", the event loop will iterate through its queue of callbacks executing them synchronously until either the queue has been exhausted, or the system-dependent hard limit is reached."
                  }
                ]
              }
            ]
          },
          {
            "type": "listItem",
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "text": "If the "
                  },
                  {
                    "type": "text",
                    "marks": [
                      {
                        "type": "bold"
                      },
                      {
                        "type": "italic"
                      }
                    ],
                    "text": "poll"
                  },
                  {
                    "type": "text",
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "text": " queue "
                  },
                  {
                    "type": "text",
                    "marks": [
                      {
                        "type": "bold"
                      },
                      {
                        "type": "italic"
                      }
                    ],
                    "text": "is empty"
                  },
                  {
                    "type": "text",
                    "text": ", one of two more things will happen:"
                  }
                ]
              },
              {
                "type": "bulletList",
                "attrs": {
                  "tight": false
                },
                "content": [
                  {
                    "type": "listItem",
                    "content": [
                      {
                        "type": "paragraph",
                        "content": [
                          {
                            "type": "text",
                            "text": "If scripts have been scheduled by "
                          },
                          {
                            "type": "text",
                            "marks": [
                              {
                                "type": "code"
                              }
                            ],
                            "text": "setImmediate()"
                          },
                          {
                            "type": "text",
                            "text": ", the event loop will end the "
                          },
                          {
                            "type": "text",
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "text": "poll"
                          },
                          {
                            "type": "text",
                            "text": " phase and continue to the "
                          },
                          {
                            "type": "text",
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "text": "check"
                          },
                          {
                            "type": "text",
                            "text": " phase to execute those scheduled scripts."
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "listItem",
                    "content": [
                      {
                        "type": "paragraph",
                        "content": [
                          {
                            "type": "text",
                            "text": "If scripts "
                          },
                          {
                            "type": "text",
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "text": "have not"
                          },
                          {
                            "type": "text",
                            "text": " been scheduled by "
                          },
                          {
                            "type": "text",
                            "marks": [
                              {
                                "type": "code"
                              }
                            ],
                            "text": "setImmediate()"
                          },
                          {
                            "type": "text",
                            "text": ", the event loop will wait for callbacks to be added to the queue, then execute them immediately."
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "Once the "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "poll"
          },
          {
            "type": "text",
            "text": " queue is empty the event loop will check for timers "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "italic"
              }
            ],
            "text": "whose time thresholds have been reached"
          },
          {
            "type": "text",
            "text": ". If one or more timers are ready, the event loop will wrap back to the "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "timers"
          },
          {
            "type": "text",
            "text": " phase to execute those timers' callbacks."
          }
        ]
      },
      {
        "type": "heading",
        "attrs": {
          "level": 3
        },
        "content": [
          {
            "type": "text",
            "marks": [
              {
                "type": "link",
                "attrs": {
                  "href": "https://nodejs.org/en/learn/asynchronous-work/event-loop-timers-and-nexttick#check",
                  "target": "_blank",
                  "rel": "noopener noreferrer nofollow",
                  "class": "text-muted-foreground underline underline-offset-[3px] hover:text-primary transition-colors cursor-pointer"
                }
              },
              {
                "type": "bold"
              }
            ],
            "text": "check"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "This phase allows the event loop to execute callbacks immediately after the "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "poll"
          },
          {
            "type": "text",
            "text": " phase has completed. If the "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "poll"
          },
          {
            "type": "text",
            "text": " phase becomes idle and scripts have been queued with "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "setImmediate()"
          },
          {
            "type": "text",
            "text": ", the event loop may continue to the "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "check"
          },
          {
            "type": "text",
            "text": " phase rather than waiting."
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "setImmediate()"
          },
          {
            "type": "text",
            "text": " is actually a special timer that runs in a separate phase of the event loop. It uses a libuv API that schedules callbacks to execute after the "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "poll"
          },
          {
            "type": "text",
            "text": " phase has completed."
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "Generally, as the code is executed, the event loop will eventually hit the "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "poll"
          },
          {
            "type": "text",
            "text": " phase where it will wait for an incoming connection, request, etc. However, if a callback has been scheduled with "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "setImmediate()"
          },
          {
            "type": "text",
            "text": " and the "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "poll"
          },
          {
            "type": "text",
            "text": " phase becomes idle, it will end and continue to the "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "check"
          },
          {
            "type": "text",
            "text": " phase rather than waiting for "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "poll"
          },
          {
            "type": "text",
            "text": " events."
          }
        ]
      },
      {
        "type": "heading",
        "attrs": {
          "level": 3
        },
        "content": [
          {
            "type": "text",
            "marks": [
              {
                "type": "link",
                "attrs": {
                  "href": "https://nodejs.org/en/learn/asynchronous-work/event-loop-timers-and-nexttick#close-callbacks",
                  "target": "_blank",
                  "rel": "noopener noreferrer nofollow",
                  "class": "text-muted-foreground underline underline-offset-[3px] hover:text-primary transition-colors cursor-pointer"
                }
              },
              {
                "type": "bold"
              }
            ],
            "text": "close callbacks"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "If a socket or handle is closed abruptly (e.g. "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "socket.destroy()"
          },
          {
            "type": "text",
            "text": "), the "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "'close'"
          },
          {
            "type": "text",
            "text": " event will be emitted in this phase. Otherwise it will be emitted via "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "process.nextTick()"
          },
          {
            "type": "text",
            "text": "."
          }
        ]
      },
      {
        "type": "heading",
        "attrs": {
          "level": 2
        },
        "content": [
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "setImmediate()"
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "link",
                "attrs": {
                  "href": "https://nodejs.org/en/learn/asynchronous-work/event-loop-timers-and-nexttick#setimmediate-vs-settimeout",
                  "target": "_blank",
                  "rel": "noopener noreferrer nofollow",
                  "class": "text-muted-foreground underline underline-offset-[3px] hover:text-primary transition-colors cursor-pointer"
                }
              },
              {
                "type": "bold"
              }
            ],
            "text": " vs "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "setTimeout()"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "setImmediate()"
          },
          {
            "type": "text",
            "text": " and "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "setTimeout()"
          },
          {
            "type": "text",
            "text": " are similar, but behave in different ways depending on when they are called."
          }
        ]
      },
      {
        "type": "bulletList",
        "attrs": {
          "tight": true
        },
        "content": [
          {
            "type": "listItem",
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "text": "setImmediate()"
                  },
                  {
                    "type": "text",
                    "text": " is designed to execute a script once the current "
                  },
                  {
                    "type": "text",
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "text": "poll"
                  },
                  {
                    "type": "text",
                    "text": " phase completes."
                  }
                ]
              }
            ]
          },
          {
            "type": "listItem",
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "text": "setTimeout()"
                  },
                  {
                    "type": "text",
                    "text": " schedules a script to be run after a minimum threshold in ms has elapsed."
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "The order in which the timers are executed will vary depending on the context in which they are called. If both are called from within the main module, then timing will be bound by the performance of the process (which can be impacted by other applications running on the machine)."
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "For example, if we run the following script which is not within an I/O cycle (i.e. the main module), the order in which the two timers are executed is non-deterministic, as it is bound by the performance of the process:"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "JSBASH"
          }
        ]
      },
      {
        "type": "codeBlock",
        "attrs": {
          "language": null
        },
        "content": [
          {
            "type": "text",
            "text": "// timeout_vs_immediate.jssetTimeout(() => {  console.log('timeout');}, 0);setImmediate(() => {  console.log('immediate');});"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "marks": [
              {
                "type": "textStyle",
                "attrs": {
                  "color": "rgb(203, 212, 217)"
                }
              },
              {
                "type": "bold"
              }
            ],
            "text": "JavaScript"
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "Copy to clipboard"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "However, if you move the two calls within an I/O cycle, the immediate callback is always executed first:"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "JSBASH"
          }
        ]
      },
      {
        "type": "codeBlock",
        "attrs": {
          "language": null
        },
        "content": [
          {
            "type": "text",
            "text": "// timeout_vs_immediate.jsconst fs = require('node:fs');fs.readFile(__filename, () => {  setTimeout(() => {    console.log('timeout');  }, 0);  setImmediate(() => {    console.log('immediate');  });});"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "marks": [
              {
                "type": "textStyle",
                "attrs": {
                  "color": "rgb(203, 212, 217)"
                }
              },
              {
                "type": "bold"
              }
            ],
            "text": "JavaScript"
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "Copy to clipboard"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "The main advantage to using "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "setImmediate()"
          },
          {
            "type": "text",
            "text": " over "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "setTimeout()"
          },
          {
            "type": "text",
            "text": " is "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "setImmediate()"
          },
          {
            "type": "text",
            "text": " will always be executed before any timers if scheduled within an I/O cycle, independently of how many timers are present."
          }
        ]
      },
      {
        "type": "heading",
        "attrs": {
          "level": 2
        },
        "content": [
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "process.nextTick()"
          }
        ]
      },
      {
        "type": "heading",
        "attrs": {
          "level": 3
        },
        "content": [
          {
            "type": "text",
            "marks": [
              {
                "type": "link",
                "attrs": {
                  "href": "https://nodejs.org/en/learn/asynchronous-work/event-loop-timers-and-nexttick#understanding-processnexttick",
                  "target": "_blank",
                  "rel": "noopener noreferrer nofollow",
                  "class": "text-muted-foreground underline underline-offset-[3px] hover:text-primary transition-colors cursor-pointer"
                }
              },
              {
                "type": "bold"
              }
            ],
            "text": "Understanding "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "process.nextTick()"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "You may have noticed that "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "process.nextTick()"
          },
          {
            "type": "text",
            "text": " was not displayed in the diagram, even though it's a part of the asynchronous API. This is because "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "process.nextTick()"
          },
          {
            "type": "text",
            "text": " is not technically part of the event loop. Instead, the "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "nextTickQueue"
          },
          {
            "type": "text",
            "text": " will be processed after the current operation is completed, regardless of the current phase of the event loop. Here, an "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "italic"
              }
            ],
            "text": "operation"
          },
          {
            "type": "text",
            "text": " is defined as a transition from the underlying C/C++ handler, and handling the JavaScript that needs to be executed."
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "Looking back at our diagram, any time you call "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "process.nextTick()"
          },
          {
            "type": "text",
            "text": " in a given phase, all callbacks passed to "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "process.nextTick()"
          },
          {
            "type": "text",
            "text": " will be resolved before the event loop continues. This can create some bad situations because "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "it allows you to \"starve\" your I/O by making recursive "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "process.nextTick()"
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": " calls"
          },
          {
            "type": "text",
            "text": ", which prevents the event loop from reaching the "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "poll"
          },
          {
            "type": "text",
            "text": " phase."
          }
        ]
      },
      {
        "type": "heading",
        "attrs": {
          "level": 3
        },
        "content": [
          {
            "type": "text",
            "marks": [
              {
                "type": "link",
                "attrs": {
                  "href": "https://nodejs.org/en/learn/asynchronous-work/event-loop-timers-and-nexttick#why-would-that-be-allowed",
                  "target": "_blank",
                  "rel": "noopener noreferrer nofollow",
                  "class": "text-muted-foreground underline underline-offset-[3px] hover:text-primary transition-colors cursor-pointer"
                }
              },
              {
                "type": "bold"
              }
            ],
            "text": "Why would that be allowed?"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "Why would something like this be included in Node.js? Part of it is a design philosophy where an API should always be asynchronous even where it doesn't have to be. Take this code snippet for example:"
          }
        ]
      },
      {
        "type": "codeBlock",
        "attrs": {
          "language": null
        },
        "content": [
          {
            "type": "text",
            "text": "function apiCall(arg, callback) {  if (typeof arg !== 'string')    return process.nextTick(      callback,      new TypeError('argument should be string')    );}"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "marks": [
              {
                "type": "textStyle",
                "attrs": {
                  "color": "rgb(203, 212, 217)"
                }
              },
              {
                "type": "bold"
              }
            ],
            "text": "JavaScript"
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "Copy to clipboard"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "The snippet does an argument check and if it's not correct, it will pass the error to the callback. The API updated fairly recently to allow passing arguments to "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "process.nextTick()"
          },
          {
            "type": "text",
            "text": " allowing it to take any arguments passed after the callback to be propagated as the arguments to the callback so you don't have to nest functions."
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "What we're doing is passing an error back to the user but only "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "italic"
              }
            ],
            "text": "after"
          },
          {
            "type": "text",
            "text": " we have allowed the rest of the user's code to execute. By using "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "process.nextTick()"
          },
          {
            "type": "text",
            "text": " we guarantee that "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "apiCall()"
          },
          {
            "type": "text",
            "text": " always runs its callback "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "italic"
              }
            ],
            "text": "after"
          },
          {
            "type": "text",
            "text": " the rest of the user's code and "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "italic"
              }
            ],
            "text": "before"
          },
          {
            "type": "text",
            "text": " the event loop is allowed to proceed. To achieve this, the JS call stack is allowed to unwind then immediately execute the provided callback which allows a person to make recursive calls to "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "process.nextTick()"
          },
          {
            "type": "text",
            "text": " without reaching a "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "RangeError: Maximum call stack size exceeded"
          },
          {
            "type": "text",
            "text": " from v8."
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "This philosophy can lead to some potentially problematic situations. Take this snippet for example:"
          }
        ]
      },
      {
        "type": "codeBlock",
        "attrs": {
          "language": null
        },
        "content": [
          {
            "type": "text",
            "text": "let bar = null;// this has an asynchronous signature, but calls callback synchronouslyfunction someAsyncApiCall(callback) {  callback();}// the callback is called before `someAsyncApiCall` completes.someAsyncApiCall(() => {  // since someAsyncApiCall hasn't completed, bar hasn't been assigned any value  console.log('bar', bar); // undefined});bar = 1;"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "marks": [
              {
                "type": "textStyle",
                "attrs": {
                  "color": "rgb(203, 212, 217)"
                }
              },
              {
                "type": "bold"
              }
            ],
            "text": "JavaScript"
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "Copy to clipboard"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "The user defines "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "someAsyncApiCall()"
          },
          {
            "type": "text",
            "text": " to have an asynchronous signature, but it actually operates synchronously. When it is called, the callback provided to "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "someAsyncApiCall()"
          },
          {
            "type": "text",
            "text": " is called in the same phase of the event loop because "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "someAsyncApiCall()"
          },
          {
            "type": "text",
            "text": " doesn't actually do anything asynchronously. As a result, the callback tries to reference "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "bar"
          },
          {
            "type": "text",
            "text": " even though it may not have that variable in scope yet, because the script has not been able to run to completion."
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "By placing the callback in a "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "process.nextTick()"
          },
          {
            "type": "text",
            "text": ", the script still has the ability to run to completion, allowing all the variables, functions, etc., to be initialized prior to the callback being called. It also has the advantage of not allowing the event loop to continue. It may be useful for the user to be alerted to an error before the event loop is allowed to continue. Here is the previous example using "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "process.nextTick()"
          },
          {
            "type": "text",
            "text": ":"
          }
        ]
      },
      {
        "type": "codeBlock",
        "attrs": {
          "language": null
        },
        "content": [
          {
            "type": "text",
            "text": "let bar = null;function someAsyncApiCall(callback) {  process.nextTick(callback);}someAsyncApiCall(() => {  console.log('bar', bar); // 1});bar = 1;"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "Here's another real world example:"
          }
        ]
      },
      {
        "type": "codeBlock",
        "attrs": {
          "language": null
        },
        "content": [
          {
            "type": "text",
            "text": "const server = net.createServer(() => {}).listen(8080);server.on('listening', () => {});"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "When only a port is passed, the port is bound immediately. So, the "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "'listening'"
          },
          {
            "type": "text",
            "text": " callback could be called immediately. The problem is that the "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": ".on('listening')"
          },
          {
            "type": "text",
            "text": " callback will not have been set by that time."
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "To get around this, the "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "'listening'"
          },
          {
            "type": "text",
            "text": " event is queued in a "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "nextTick()"
          },
          {
            "type": "text",
            "text": " to allow the script to run to completion. This allows the user to set any event handlers they want."
          }
        ]
      },
      {
        "type": "heading",
        "attrs": {
          "level": 2
        },
        "content": [
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "process.nextTick()"
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "link",
                "attrs": {
                  "href": "https://nodejs.org/en/learn/asynchronous-work/event-loop-timers-and-nexttick#processnexttick-vs-setimmediate",
                  "target": "_blank",
                  "rel": "noopener noreferrer nofollow",
                  "class": "text-muted-foreground underline underline-offset-[3px] hover:text-primary transition-colors cursor-pointer"
                }
              },
              {
                "type": "bold"
              }
            ],
            "text": " vs "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "setImmediate()"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "We have two calls that are similar as far as users are concerned, but their names are confusing."
          }
        ]
      },
      {
        "type": "bulletList",
        "attrs": {
          "tight": true
        },
        "content": [
          {
            "type": "listItem",
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "text": "process.nextTick()"
                  },
                  {
                    "type": "text",
                    "text": " fires immediately on the same phase"
                  }
                ]
              }
            ]
          },
          {
            "type": "listItem",
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "text": "setImmediate()"
                  },
                  {
                    "type": "text",
                    "text": " fires on the following iteration or 'tick' of the event loop"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "In essence, the names should be swapped. "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "process.nextTick()"
          },
          {
            "type": "text",
            "text": " fires more immediately than "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "setImmediate()"
          },
          {
            "type": "text",
            "text": ", but this is an artifact of the past which is unlikely to change. Making this switch would break a large percentage of the packages on npm. Every day more new modules are being added, which means every day we wait, more potential breakages occur. While they are confusing, the names themselves won't change."
          }
        ]
      },
      {
        "type": "blockquote",
        "content": [
          {
            "type": "paragraph",
            "content": [
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": "We recommend developers use "
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "code"
                  }
                ],
                "text": "setImmediate()"
              },
              {
                "type": "text",
                "marks": [
                  {
                    "type": "bold"
                  }
                ],
                "text": " in all cases because it's easier to reason about."
              }
            ]
          }
        ]
      },
      {
        "type": "heading",
        "attrs": {
          "level": 2
        },
        "content": [
          {
            "type": "text",
            "marks": [
              {
                "type": "link",
                "attrs": {
                  "href": "https://nodejs.org/en/learn/asynchronous-work/event-loop-timers-and-nexttick#why-use-processnexttick",
                  "target": "_blank",
                  "rel": "noopener noreferrer nofollow",
                  "class": "text-muted-foreground underline underline-offset-[3px] hover:text-primary transition-colors cursor-pointer"
                }
              },
              {
                "type": "bold"
              }
            ],
            "text": "Why use "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "process.nextTick()"
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "link",
                "attrs": {
                  "href": "https://nodejs.org/en/learn/asynchronous-work/event-loop-timers-and-nexttick#why-use-processnexttick",
                  "target": "_blank",
                  "rel": "noopener noreferrer nofollow",
                  "class": "text-muted-foreground underline underline-offset-[3px] hover:text-primary transition-colors cursor-pointer"
                }
              },
              {
                "type": "bold"
              }
            ],
            "text": "?"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "There are two main reasons:"
          }
        ]
      },
      {
        "type": "orderedList",
        "attrs": {
          "tight": false,
          "start": 1,
          "type": null
        },
        "content": [
          {
            "type": "listItem",
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "text": "Allow users to handle errors, cleanup any then unneeded resources, or perhaps try the request again before the event loop continues."
                  }
                ]
              }
            ]
          },
          {
            "type": "listItem",
            "content": [
              {
                "type": "paragraph",
                "content": [
                  {
                    "type": "text",
                    "text": "At times it's necessary to allow a callback to run after the call stack has unwound but before the event loop continues."
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "One example is to match the user's expectations. Simple example:"
          }
        ]
      },
      {
        "type": "codeBlock",
        "attrs": {
          "language": null
        },
        "content": [
          {
            "type": "text",
            "text": "const server = net.createServer();server.on('connection', conn => {});server.listen(8080);server.on('listening', () => {});"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "Say that "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "listen()"
          },
          {
            "type": "text",
            "text": " is run at the beginning of the event loop, but the listening callback is placed in a "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "setImmediate()"
          },
          {
            "type": "text",
            "text": ". Unless a hostname is passed, binding to the port will happen immediately. For the event loop to proceed, it must hit the "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "bold"
              }
            ],
            "text": "poll"
          },
          {
            "type": "text",
            "text": " phase, which means there is a non-zero chance that a connection could have been received allowing the connection event to be fired before the listening event."
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "Another example is extending an "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "EventEmitter"
          },
          {
            "type": "text",
            "text": " and emitting an event from within the constructor:"
          }
        ]
      },
      {
        "type": "codeBlock",
        "attrs": {
          "language": null
        },
        "content": [
          {
            "type": "text",
            "text": "const EventEmitter = require('node:events');class MyEmitter extends EventEmitter {  constructor() {    super();    this.emit('event');  }}const myEmitter = new MyEmitter();myEmitter.on('event', () => {  console.log('an event occurred!');});"
          }
        ]
      },
      {
        "type": "paragraph",
        "content": [
          {
            "type": "text",
            "text": "You can't emit an event from the constructor immediately because the script will not have processed to the point where the user assigns a callback to that event. So, within the constructor itself, you can use "
          },
          {
            "type": "text",
            "marks": [
              {
                "type": "code"
              }
            ],
            "text": "process.nextTick()"
          },
          {
            "type": "text",
            "text": " to set a callback to emit the event after the constructor has finished, which provides the expected results:"
          }
        ]
      }
    ]
  },
  "online_content_time": "2025-07-21T10:18:46.741Z"
}