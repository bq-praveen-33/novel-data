{
  "online_content": {
    "type": "doc",
    "content": [
      {
        "type": "codeBlock",
        "attrs": {
          "language": "typescriptreact"
        },
        "content": [
          {
            "type": "text",
            "text": "\"use client\";\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { Note, ViewCollection } from \"@/types/board\";\nimport { Edit, MenuIcon, Trash2Icon } from \"lucide-react\";\n\ninterface CalendarCardProps {\n  card: Note;\n  board: ViewCollection;\n  colors: { bg: string; text: string };\n  onEdit: (newTitle: string) => void;\n  onDelete: () => void;\n  onClick: (card: Note) => void;\n  onDragStart?: (e: React.DragEvent) => void;\n  onUpdateDateRange?: (startDate: Date, endDate: Date) => void;\n  primaryDateProperty: string;\n}\n\n// Helper to parse date range\nfunction parseDateRange(value: string | undefined): { start: Date; end: Date } | null {\n  if (!value) return null;\n\n  const match = value.match(/\\[(.*?) - (.*?)\\]/);\n  if (match) {\n    const start = new Date(match[1]);\n    const end = new Date(match[2]);\n    if (!isNaN(start.getTime()) && !isNaN(end.getTime())) {\n      return { start, end };\n    }\n  }\n\n  // Fallback to single date\n  const singleDate = new Date(value);\n  if (!isNaN(singleDate.getTime())) {\n    return { start: singleDate, end: singleDate };\n  }\n\n  return null;\n}\n\n\nexport default function CalendarCard({\n  card,\n  board,\n  colors,\n  onEdit,\n  onDelete,\n  onClick,\n  onDragStart,\n  onUpdateDateRange,\n  primaryDateProperty,\n}: CalendarCardProps) {\n  const [isEditing, setIsEditing] = useState(false);\n  const [editValue, setEditValue] = useState(card.title);\n  const [showContextMenu, setShowContextMenu] = useState(false);\n  const [contextMenuPosition, setContextMenuPosition] = useState({ x: 0, y: 0 });\n  const inputRef = useRef<HTMLInputElement>(null);\n  const contextMenuRef = useRef<HTMLDivElement>(null);\n  const cardRef = useRef<HTMLDivElement>(null);\n\n  // Resize state\n  const [isResizing, setIsResizing] = useState<\"left\" | \"right\" | null>(null);\n  const [startX, setStartX] = useState(0);\n  const [originalDateRange, setOriginalDateRange] = useState<{ start: Date; end: Date } | null>(null);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (contextMenuRef.current && !contextMenuRef.current.contains(event.target as Node)) {\n        setShowContextMenu(false);\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, []);\n\n  useEffect(() => {\n    if (isEditing && inputRef.current) {\n      inputRef.current.focus();\n      inputRef.current.select();\n    }\n  }, [isEditing]);\n\n  const handleEditSubmit = () => {\n    if (editValue.trim() && editValue.trim() !== card.title) {\n      onEdit(editValue.trim());\n    }\n    setIsEditing(false);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\") handleEditSubmit();\n    else if (e.key === \"Escape\") {\n      setIsEditing(false);\n      setEditValue(card.title);\n    }\n  };\n\n  const handleBlur = () => handleEditSubmit();\n\n  const handleCardClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (!isEditing && !isResizing) onClick(card);\n  };\n\n  const handleContextMenuEvent = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const x = Math.min(e.clientX, window.innerWidth - 150);\n    const y = Math.min(e.clientY, window.innerHeight - 120);\n    setContextMenuPosition({ x, y });\n    setShowContextMenu(true);\n  };\n\n  const handleDragStartEvent = (e: React.DragEvent) => {\n    if (isResizing) {\n      e.preventDefault();\n      return;\n    }\n    if (onDragStart) {\n      onDragStart(e);\n    }\n  };\n\n  // Resize handlers\n  const handleResizeStart = (side: \"left\" | \"right\", e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    \n    setIsResizing(side);\n    setStartX(e.clientX);\n    \n    const dateValue = card.databaseProperties?.[primaryDateProperty];\n    if (dateValue) {\n      const range = parseDateRange(dateValue);\n      if (range) {\n        setOriginalDateRange(range);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (!isResizing || !originalDateRange) return;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      e.preventDefault();\n      \n      const deltaX = e.clientX - startX;\n      const cellWidth = 140; // Approximate cell width\n      const deltaDays = Math.round(deltaX / cellWidth);\n      \n      if (deltaDays === 0) return;\n      \n      let newStart = new Date(originalDateRange.start);\n      let newEnd = new Date(originalDateRange.end);\n      \n      if (isResizing === \"left\") {\n        newStart = new Date(originalDateRange.start);\n        newStart.setDate(newStart.getDate() + deltaDays);\n        // Ensure start doesn't go past end\n        if (newStart > newEnd) {\n          newStart = new Date(newEnd);\n        }\n      } else if (isResizing === \"right\") {\n        newEnd = new Date(originalDateRange.end);\n        newEnd.setDate(newEnd.getDate() + deltaDays);\n        // Ensure end doesn't go before start\n        if (newEnd < newStart) {\n          newEnd = new Date(newStart);\n        }\n      }\n      \n      // Visual feedback could be added here\n    };\n\n    const handleMouseUp = (e: MouseEvent) => {\n      if (!originalDateRange) return;\n      \n      const deltaX = e.clientX - startX;\n      const cellWidth = 140;\n      const deltaDays = Math.round(deltaX / cellWidth);\n      \n      if (deltaDays !== 0 && onUpdateDateRange) {\n        let newStart = new Date(originalDateRange.start);\n        let newEnd = new Date(originalDateRange.end);\n        \n        if (isResizing === \"left\") {\n          newStart.setDate(newStart.getDate() + deltaDays);\n          if (newStart > newEnd) {\n            newStart = new Date(newEnd);\n          }\n        } else if (isResizing === \"right\") {\n          newEnd.setDate(newEnd.getDate() + deltaDays);\n          if (newEnd < newStart) {\n            newEnd = new Date(newStart);\n          }\n        }\n        \n        onUpdateDateRange(newStart, newEnd);\n      }\n      \n      setIsResizing(null);\n      setOriginalDateRange(null);\n    };\n\n    document.addEventListener(\"mousemove\", handleMouseMove);\n    document.addEventListener(\"mouseup\", handleMouseUp);\n    \n    return () => {\n      document.removeEventListener(\"mousemove\", handleMouseMove);\n      document.removeEventListener(\"mouseup\", handleMouseUp);\n    };\n  }, [isResizing, startX, originalDateRange, onUpdateDateRange, primaryDateProperty]);\n\n  // Calculate card width based on date range\n  const getCardWidth = () => {\n    const dateValue = card.databaseProperties?.[primaryDateProperty];\n    if (!dateValue) return \"100%\";\n    \n    const range = parseDateRange(dateValue);\n    if (!range) return \"100%\";\n    \n    const daysDiff = Math.ceil((range.end.getTime() - range.start.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n    \n    if (daysDiff > 1) {\n      return `calc(${daysDiff * 100}% + ${(daysDiff - 1) * 8}px)`; // 8px for gap\n    }\n    \n    return \"100%\";\n  };\n\n  if (isEditing) {\n    return (\n      <div\n        className=\"px-2 py-1 rounded cursor-pointer transition-opacity\"\n        style={{ backgroundColor: colors.bg, width: getCardWidth() }}\n      >\n        <input\n          ref={inputRef}\n          type=\"text\"\n          value={editValue}\n          onChange={(e) => setEditValue(e.target.value)}\n          onKeyDown={handleKeyDown}\n          onBlur={handleBlur}\n          className=\"w-full px-1 py-0.5 text-xs bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-transparent\"\n          style={{ color: colors.text }}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div\n        ref={cardRef}\n        draggable={!isResizing}\n        onDragStart={handleDragStartEvent}\n        className={`relative p-1.5 rounded cursor-pointer hover:opacity-90 transition-all truncate group ${\n          isResizing ? 'cursor-ew-resize' : 'cursor-move'\n        }`}\n        style={{\n          backgroundColor: colors.bg,\n          color: colors.text,\n          width: getCardWidth(),\n          minHeight: \"28px\",\n        }}\n        title={card.title}\n        onClick={handleCardClick}\n        onContextMenu={handleContextMenuEvent}\n      >\n        <div className=\"font-medium text-sm truncate pointer-events-none\">\n          {card.title}\n        </div>\n\n        {/* Left Resize Handle */}\n        <div\n          className=\"absolute left-0 top-0 h-full w-2 cursor-ew-resize opacity-0 hover:opacity-100 group-hover:opacity-50 hover:!opacity-100 transition-opacity bg-blue-500 rounded-l\"\n          onMouseDown={(e) => handleResizeStart(\"left\", e)}\n          style={{ zIndex: 10 }}\n        />\n\n        {/* Right Resize Handle */}\n        <div\n          className=\"absolute right-0 top-0 h-full w-2 cursor-ew-resize opacity-0 hover:opacity-100 group-hover:opacity-50 hover:!opacity-100 transition-opacity bg-blue-500 rounded-r\"\n          onMouseDown={(e) => handleResizeStart(\"right\", e)}\n          style={{ zIndex: 10 }}\n        />\n      </div>\n\n      {/* Context Menu */}\n      {showContextMenu && (\n        <div\n          ref={contextMenuRef}\n          className=\"fixed bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-600 rounded-lg shadow-lg py-1 z-50 min-w-[180px]\"\n          style={{\n            left: contextMenuPosition.x,\n            top: contextMenuPosition.y,\n          }}\n        >\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              setIsEditing(true);\n              setShowContextMenu(false);\n            }}\n            className=\"w-full flex items-center gap-2 px-3 py-1.5 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700\"\n          >\n            <Edit className=\"w-3.5 h-3.5\" />\n            Edit Title\n          </button>\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              onClick(card);\n              setShowContextMenu(false);\n            }}\n            className=\"w-full flex items-center gap-2 px-3 py-1.5 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700\"\n          >\n            <MenuIcon className=\"h-4 w-4\" />\n            Edit Properties\n          </button>\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              setShowContextMenu(false);\n              onDelete();\n            }}\n            className=\"w-full flex items-center gap-2 px-3 py-1.5 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 hover:text-red-600 dark:hover:text-red-400\"\n          >\n            <Trash2Icon className=\"h-4 w-4\" />\n            Delete\n          </button>\n        </div>\n      )}\n    </>\n  );\n}"
          }
        ]
      }
    ]
  },
  "online_content_time": "2025-10-22T10:17:17.626Z"
}