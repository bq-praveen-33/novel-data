{
  "online_content": {
    "type": "doc",
    "content": [
      {
        "type": "codeBlock",
        "attrs": {
          "language": "typescriptreact"
        },
        "content": [
          {
            "type": "text",
            "text": "\"use client\";\n\nimport { createContext, useContext, useState, ReactNode } from \"react\";\nimport { Comment, Note } from \"@/types/board\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { ObjectId } from \"bson\";\nimport { postWithAuth } from \"@/lib/api-helpers\";\nimport { toast } from \"sonner\";\nimport { useBoard } from \"@/contexts/boardContext\";\n\ninterface CommentContextType {\n  comments: Comment[];\n  addComment: (text: string) => void;\n  editComment: (commentId: string, newText: string) => void;\n  deleteComment: (commentId: string) => void;\n  setComments: (comments: Comment[]) => void;\n}\n\nconst CommentContext = createContext<CommentContextType | undefined>(undefined);\n\nexport function CommentProvider({\n  children,\n  initialComments = [],\n  noteId,\n  boardId,\n  note\n}: {\n  children: ReactNode;\n  initialComments?: Comment[];\n  noteId: string,\n  boardId: string,\n  note: Note\n}) {\n  const [comments, setComments] = useState<Comment[]>(initialComments);\n  const {user} = useAuth();\n  const { updateNote } = useBoard();\n\n\n  const addComment = async (text: string) => {\n\n    if(!user){\n      console.log(\"User not found\")\n      return;\n    }\n    const newCommentId = new ObjectId();\n    const newComment: Comment = {\n      commentId: `${newCommentId}`,\n      commenterName: user?.name ||  \"unknown\" ,\n      commenterEmail: user?.email,\n      text,\n      createdAt: new Date().toISOString(),\n    };\n\n    setComments((prev) => [...prev, newComment]);\n    try{\n        const response = await postWithAuth(\"/api/database/comment/add\", {\n            text,\n            noteId\n        });\n\n        if (response?.comment?.success) {\n            const updatedComment = response.comment?.comment;\n            const serverComment: Comment = {\n              ...updatedComment,\n              createdAt: updatedComment.createdAt,\n            };\n    \n            // Step 4: Replace optimistic comment with real one\n            setComments((prev) =>\n              prev.map((c) =>\n                c.commentId === newCommentId.toString() ? serverComment : c\n              )\n            );\n\n            // After receiving the server comment\n            const updatedNoteForContext = {\n                ...note,   \n                comments: [...comments, serverComment]\n            };\n            \n            // Update BoardContext\n            updateNote(boardId, noteId, updatedNoteForContext);\n\n          } else {\n            toast.error(\"Failed to add comment\");\n            throw new Error(\"Failed to add comment\");\n          }\n    }\n    catch(err){\n      console.log(\"Error in adding comment\", err)\n      setComments((prev) => prev.filter((c) => c.commentId !== newCommentId.toString()));\n\n    }\n  };\n\n  const editComment = (commentId: string, newText: string) => {\n    setComments((prev) =>\n      prev.map((c) => (c.commentId === commentId ? { ...c, text: newText } : c))\n    );\n  };\n\n  const deleteComment = (commentId: string) => {\n    setComments((prev) => prev.filter((c) => c.commentId !== commentId));\n  };\n\n  return (\n    <CommentContext.Provider\n      value={{ comments, addComment, editComment, deleteComment, setComments }}\n    >\n      {children}\n    </CommentContext.Provider>\n  );\n}\n\nexport const useComments = () => {\n  const context = useContext(CommentContext);\n  if (!context) throw new Error(\"useComments must be used within CommentProvider\");\n  return context;\n};\n"
          }
        ]
      }
    ]
  },
  "online_content_time": "2025-10-08T14:16:54.790Z"
}