{
  "online_content": {
    "type": "doc",
    "content": [
      {
        "type": "codeBlock",
        "attrs": {
          "language": "typescript"
        },
        "content": [
          {
            "type": "text",
            "text": "import { AfterViewInit, Component, inject, OnDestroy, OnInit, QueryList, TemplateRef, ViewChild, ViewChildren } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { NgbDropdown } from '@ng-bootstrap/ng-bootstrap';\nimport { UUID } from 'angular2-uuid';\nimport { DriveCampaignColor, DriveCampaignStatus } from 'app/layouts/my-projects/project.const';\nimport { TranslatePipe } from 'app/shared/pipes/translate.pipe';\nimport { AnalyticsService } from 'app/shared/services/analytics.service';\nimport { AuthService } from 'app/shared/services/auth.service';\nimport { CryptoService } from 'app/shared/services/crypto.service';\nimport { EmitterService } from 'app/shared/services/emitter.service';\nimport { CampaignName, HelperService } from 'app/shared/services/helper.service';\nimport { MtmBreadcrumbLink, MtmBreadcrumbService } from 'app/shared/services/mtm-breadcrumb.service';\nimport { Authority, PermissionService } from 'app/shared/services/permissions.service';\nimport { ProjectV2ServiceService } from 'app/shared/services/project-v2-service.service';\nimport { ProjectService } from 'app/shared/services/project.service';\nimport { ThemeService } from 'app/shared/services/theme.service';\nimport { TimelineService } from 'app/shared/services/timeline.service';\nimport _ from 'lodash';\nimport { BreadcrumbService } from 'ng5-breadcrumb';\nimport { Subject, Subscription } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { WorkspaceService } from \"app/shared/services/workspace.service\";\nimport { FeatureCriteriaForm, FeatureTypes, WorkspaceDTO } from \"app/shared/interfaces\";\nimport { OverlayService } from 'app/shared/services/overlayService';\nimport { ProjectsComponent } from '../projects/projects.component';\nimport { GoogleAnalyticsService } from \"app/kanban/core/services/google-analytics.service\"\nimport { BrandService } from 'app/shared/services/brand.service';\nimport { CampaignSearchParams } from 'app/shared/interfaces/workspace-search-params.interface';\nimport { FeatureConfigService } from 'app/shared/services/feature-config.service';\nimport { CAMPAIGN_WORKSPACE_COMPONENT_NAMES, CAMPAIGN_WORKSPACE_CONSTANTS, CAMPAIGN_WORKSPACE_HEADER_LABELS, CAMPAIGN_WORKSPACE_ROUTES, CAMPAIGN_WORKSPACE_TRANSLATIONS } from 'app/shared/models/campaign-workspace-translations';\nimport { BlobPicture, BrandId, BrandUpdatedEvent, CalendarFilterUpdatedEvent, DriveCampaignEvent, ErrorValue, FirstName, FullName, LastName, NewCampaign } from 'app/shared/models';\nimport { CampaignDriveFilterService } from './services/campaign-drive-filter.service'\nimport { CampaignDriveWorkSpaceService } from './services/campaign-drive-workspace.service';\nimport { CampaignDriveService } from './services/campaign-drive.service'\n@Component({\n    selector: 'mtm-campaign-drive',\n    templateUrl: './campaign-drive.component.html',\n    styleUrls: ['./campaign-drive.component.scss', '../nav-tabs.scss'],\n    standalone: false\n})\nexport class CampaignDriveComponent implements OnInit, OnDestroy, AfterViewInit {\n    @ViewChildren(NgbDropdown) settingsDropdown: QueryList<NgbDropdown>;\n    @ViewChild(NgbDropdown, { static: false }) dropdownProjectStatus: NgbDropdown;\n    @ViewChild('searchPanel', { static: false }) searchPanel: TemplateRef<any>;\n    @ViewChild(NgbDropdown, { static: false }) filterMadDropdown: NgbDropdown;\n    @ViewChild(ProjectsComponent) projects!: ProjectsComponent;\n\n    ngUnsubscribe = new Subject();\n    isLoaded: boolean = false;\n    inWorkspace: boolean = false;\n    backupDriveCampaigns = [];\n    DriveCampaigns = [];\n    favbackupDriveCampaigns = [];\n    favDriveCampaigns = [];\n    archiveDriveCampaigns = [];\n    archiveBackupDriveCampaigns = [];\n    timelines: any = [];\n    authUser: any;\n    workspaceId: string;\n    url: any;\n    projectColor = DriveCampaignColor;\n    projectStatus = DriveCampaignStatus;\n    initialName: any;\n    nameColor: any;\n    usersList: any = {};\n    usersLoaded: boolean = false;\n    blobPicture: any;\n    username: any;\n    categoryTags: string[] = [];\n    brandId: string;\n    canCreateDriveCampaign: boolean = false;\n    canEditStatus: boolean = false;\n    canCreateProject: boolean = false;\n    workspaceName: string;\n    banner: any;\n    isError: boolean = false;\n    cacheBuster: string = new Date().getTime().toString();\n    isActive: boolean = true;\n    searchDriveCampaign: string;\n    searchDriveCampaignChanged: Subject<string> = new Subject<string>();\n    workspaces: any[] = [];\n    selectedWorkspace: any = {\n        name: CAMPAIGN_WORKSPACE_TRANSLATIONS.ALL_WORKSPACES,\n        id: null\n    };\n    calendarViewMode = CAMPAIGN_WORKSPACE_CONSTANTS.CALENDAR_VIEW_MODES.LAST_UPDATED;\n    isAll: boolean = true;\n    isFav: boolean = false;\n    isFavorites: boolean = false;\n    isArchived: boolean = false;\n    hasNext: boolean = false;\n    isAllProject: boolean = true;\n    isFavoritesProject: boolean = false;\n    isArchivedProject: boolean = false;\n    page: number = 1;\n    isInit: boolean = false;\n    pagingState: string;\n    isStandAloneSearchEnabled: boolean = false;\n    headerLabel = CAMPAIGN_WORKSPACE_HEADER_LABELS.CAMPAIGNS;\n    linksLabel: string;\n    newCampaignLabel: string;\n    isCampaignCollapse: boolean = true;\n    isProjectCollapse: boolean = true;\n    activeTab: string = 'all';\n    showGoBackToWorkspace: boolean = false;\n    calendarViewDates: any;\n    private subscription: Subscription = new Subscription();\n\n    campaignSearchParams: CampaignSearchParams;\n\n    userBrands: any[] = [];\n    getWorkspaceRequest$ = new Subject();\n\n    years = [];\n    months = CAMPAIGN_WORKSPACE_CONSTANTS.CALENDAR_VIEW_MODES.MONTHS;\n    sortBy: string = CAMPAIGN_WORKSPACE_CONSTANTS.CALENDAR_VIEW_MODES.DATE;\n    monthCollapse: any = {};\n\n    productDevManagers = [];\n    cncManagers = [];\n\n    cncQuery: string;\n    productDevQuery: string;\n    yearSelected: any[] = [];\n    isWidPresent: boolean = false;\n    firstInit: boolean = true;\n    isCriteriaForm1Enabled: boolean;\n    isCriteriaForm2Enabled: boolean;\n    isCriteriaFormTimelineSimplified1Enabled: boolean;\n\n    // Feature config variables\n    private featureConfigService = inject(FeatureConfigService);\n    hasSimulator: boolean;\n    hasCncManager: boolean;\n    hasProductDevManager: boolean;\n    hasActiveProduct: boolean;\n    isWorkspaceEnabled: boolean;\n\n    allCnCManagerSelected: boolean = false;\n    allProductDevManagerSelected: boolean = false;\n    allMadSelected: boolean = false;\n    madMonthYear: any = {};\n    madLabel: string;\n\n    constructor(\n        private route: ActivatedRoute,\n        private router: Router,\n        private projectV2Service: ProjectV2ServiceService,\n        private translatePipe: TranslatePipe,\n        private analyticService: AnalyticsService,\n        private authService: AuthService,\n        private cryptoService: CryptoService,\n        private breadcrumbService: BreadcrumbService,\n        public timelineService: TimelineService,\n        private permissionService: PermissionService,\n        public projectService: ProjectService,\n        private mtmBreadcrumbService: MtmBreadcrumbService,\n        private overlayService: OverlayService,\n        private workspaceService: WorkspaceService,\n        private themeService: ThemeService,\n        private googleAnalyticsService: GoogleAnalyticsService,\n        private brandService: BrandService,\n        private campaignDriveFilterService: CampaignDriveFilterService,\n        private campaignDriveWorkSpaceService: CampaignDriveWorkSpaceService,\n        private campaignDriveService: CampaignDriveService\n    ) {\n        this.mtmBreadcrumbService.setLinks([]);\n        this.setBreadcrumb();\n        this.timelineService.lastSelectedDriveCampaign = null;\n        this.timelineService.isDriveNav.emit(true);\n        this.router.events.subscribe((event: any) => {\n            if (event.url) {\n                this.url = event.url\n            }\n        });\n        this.nameColor = this.stringToHslColor(UUID.UUID() + \" \" + UUID.UUID());\n\n        // Subscribe to change avatar user\n        EmitterService.get('authUser.changeAvatar').pipe(\n            takeUntil(this.ngUnsubscribe)\n        ).subscribe((data) => {\n            if (data && data.externalUser) {\n                this.username = data.user.email;\n                setTimeout(() => {\n                    this.reloadProfilePicture();\n                }, 350);\n            } else if (data && data.email === this.username) {\n                setTimeout(() => {\n                    this.reloadProfilePicture();\n                }, 350);\n            }\n        })\n        EmitterService.get(BrandUpdatedEvent).pipe(\n            takeUntil(this.ngUnsubscribe)\n        ).subscribe({\n            next: () => {\n                this.setBreadcrumb();\n                this.setCurrentSelectedBrand();\n            }\n        });\n\n        this.searchDriveCampaignChanged\n            .pipe(debounceTime(350), distinctUntilChanged())\n            .subscribe(model => {\n                this.searchDriveCampaign = model;\n                this.searchDriveCampaigns();\n            });\n        this.getDriveCampaignSearchParams();\n    }\n\n    currentBrand: any;\n    setCurrentSelectedBrand() {\n        this.currentBrand = JSON.parse(localStorage.getItem(CAMPAIGN_WORKSPACE_CONSTANTS.WORKSPACE_LOCAL_STORAGE_KEYS.BRAND));\n    }\n\n    searchQueryChanged(query: string) {\n        this.searchDriveCampaignChanged.next(query);\n    }\n\n    selectBrand(brand) {\n        if (brand.id == this.currentBrand.id) {\n            return;\n        }\n        this.authService.setMyBrand(brand);\n        this.setCurrentSelectedBrand();\n        setTimeout(() => {\n            window.location.reload();\n        }, 1000)\n    }\n\n    setDriveCampaignSearchParams() {\n        if (this.workspaceId) {\n            localStorage.setItem('campaignSearchParams__' + this.workspaceId, JSON.stringify(this.campaignSearchParams));\n            localStorage.setItem('campaignSortBy__' + this.workspaceId, this.sortBy);\n        } else {\n            localStorage.setItem('campaignSearchParams', JSON.stringify(this.campaignSearchParams));\n            localStorage.setItem('campaignSortBy', this.sortBy);\n        }\n    }\n\n\n    getDriveCampaignSearchParams() {\n        if (this.workspaceId) {\n            this.campaignSearchParams = JSON.parse(localStorage.getItem('campaignSearchParams__' + this.workspaceId));\n            this.sortBy = localStorage.getItem('campaignSortBy__' + this.workspaceId) || 'Date';\n        } else {\n            this.campaignSearchParams = JSON.parse(localStorage.getItem('campaignSearchParams'));\n            this.sortBy = localStorage.getItem('campaignSortBy') || 'Date';\n        }\n    }\n\n    setYearSelected() {\n        const selectedMonths = this.campaignSearchParams?.selectedMonths || [];\n        selectedMonths.map(m => {\n            this.madMonthYear[m.substring(0, 4)][m.substring(4, 6)] = true;\n            return m.substring(0, 4);\n        }).filter((value, index, array) => {\n            return array.indexOf(value) == index;\n        });\n        for (let i = 0; i < this.years.length; i++) {\n            const totalMonthSelected = selectedMonths.filter(m => {\n                return m.startsWith(this.years[i]);\n            }).length;\n            if (totalMonthSelected == 12) {\n                this.yearSelected.push(parseInt(this.years[i]));\n            }\n        }\n    }\n\n    ngOnInit(): void {\n        this.setCurrentSelectedBrand();\n        this.campaignDriveWorkSpaceService.isInsideWorkspace().subscribe(value => {\n            this.inWorkspace = value;\n        });\n        this.timelineService.activeCampaign$.next(null);\n\n        this.authUser = this.authService.getAuthUser();\n        this.workspaceName = this.timelineService.workspaceName;\n        // for dashboard image\n\n        this.brandId = localStorage.getItem(BrandId)\n        this.nameColor = this.stringToHslColor(this.username);\n        this.route.queryParams.subscribe(query => {\n            this.showGoBackToWorkspace = !!query.wid;\n            if (query.wid) {\n                const brand = JSON.parse(localStorage.getItem(CAMPAIGN_WORKSPACE_CONSTANTS.WORKSPACE_LOCAL_STORAGE_KEYS.BRAND));\n                this.workspaceId = this.cryptoService.decryptUsingAES256(query.wid);\n                if (!brand.workspaces.find(w => w.id == this.workspaceId)) {\n                    this.router.navigate([CAMPAIGN_WORKSPACE_HEADER_LABELS.WORKSPACES, CAMPAIGN_WORKSPACE_COMPONENT_NAMES.CAMPAIGN_DRIVE]);\n                } else {\n                    this.timelineService.workspaceId = this.workspaceId;\n                    this.getDriveCampaignSearchParams();\n                    this.campaignDriveWorkSpaceService.getWorkspaceData(this.authUser.companyId, this.workspaceId).subscribe(() => { });\n                    if (this.workspaceId) {\n                        this.workspaceName = this.timelineService.workspaceName;\n                        const brand = JSON.parse(localStorage.getItem(CAMPAIGN_WORKSPACE_CONSTANTS.WORKSPACE_LOCAL_STORAGE_KEYS.BRAND));\n                        const pageLinks: MtmBreadcrumbLink[] = [{\n                            label: brand.name\n                        }, {\n                            label: this.selectedWorkspace.name,\n                            url: [CAMPAIGN_WORKSPACE_ROUTES.WORKSPACES, CAMPAIGN_WORKSPACE_COMPONENT_NAMES.CAMPAIGN_DRIVE],\n                            queryParams: {\n                                wid: this.cryptoService.encryptString(this.workspaceId)\n                            }\n                        }, {\n                            label: CAMPAIGN_WORKSPACE_COMPONENT_NAMES.CAMPAIGN\n                        }]\n                        this.mtmBreadcrumbService.setLinks(pageLinks);\n                    }\n                    this.getDriveCampaignSearchParams();\n                }\n            } else {\n                this.getDriveCampaignSearchParams();\n                this.timelineService.workspaceId = '';\n            }\n        });\n        this.getWorkspaceDriveCampaign();\n        this.setProfilePicture(this.authUser)\n        this.getSideNavWorkspace();\n\n        // get workspace\n        this.getWorkspaces();\n\n        this.isInit = true;\n        // trigger tabs\n        // this.getTabsInputs();\n\n        this.canEditStatus = (this.permissionService.hasAuthority(Authority.Z, this.permissionService.GLOBAL_SCOPE_PROJECT_ID) || this.permissionService.hasAuthority(Authority.Z)) || (this.authService.hasPaidSubscription() && this.permissionService.hasAuthority(Authority.S, this.permissionService.GLOBAL_SCOPE_PROJECT_ID));\n\n        const isAgencyUser = this.authUser.userPermissionType === CAMPAIGN_WORKSPACE_CONSTANTS.AGENCY;\n        if (!isAgencyUser) {\n            this.canCreateDriveCampaign = ((this.permissionService.hasAuthority(Authority.Z, this.permissionService.GLOBAL_SCOPE_PROJECT_ID) || this.permissionService.hasAuthority(Authority.Z)) || (this.authService.hasPaidSubscription()) && this.permissionService.hasAuthority(Authority.P, this.permissionService.GLOBAL_SCOPE_PROJECT_ID));\n            this.canCreateProject = (((this.permissionService.hasAuthority(Authority.Z, this.permissionService.GLOBAL_SCOPE_PROJECT_ID) || this.permissionService.hasAuthority(Authority.Z)) || this.authService.hasPaidSubscription()) && this.permissionService.hasAuthority(Authority.P, this.permissionService.GLOBAL_SCOPE_PROJECT_ID));\n        }\n\n        this.route.queryParams.subscribe(params => {\n            const wid = params['wid'];\n            this.isWidPresent = !!wid;\n            console.log('wid exists:', this.isWidPresent);\n        });\n\n        this.featureConfigService.getFeatureConfigs([\n            FeatureTypes.FEA_CAMPAIGN_MAIN,\n            FeatureTypes.FEA_CAMPAIGN_TIMELINE,\n            FeatureTypes.FEA_WORKSPACE_MAIN\n        ]).pipe(takeUntil(this.ngUnsubscribe)).subscribe({\n            next: (response) => {\n                let campaignMainConfig = response[FeatureTypes.FEA_CAMPAIGN_MAIN];\n                let campaignTimelineConfig = response[FeatureTypes.FEA_CAMPAIGN_TIMELINE];\n\n                this.hasSimulator = campaignTimelineConfig?.hasSimulator;\n                // Translate campaign name from BE to localization key\n                const featureConfigCampaignName = HelperService.translateConfigCampaignNameToLocalizationKey(\n                    campaignMainConfig?.campaignName as CampaignName, CAMPAIGN_WORKSPACE_TRANSLATIONS.CAMPAIGN_NAME\n                );\n                if (featureConfigCampaignName) this.headerLabel = featureConfigCampaignName;\n\n                const featureConfigCampaignNameProjects = HelperService.translateConfigCampaignNameToLocalizationKey(\n                    campaignMainConfig?.campaignName as CampaignName, CAMPAIGN_WORKSPACE_TRANSLATIONS.CAMPAIGN_NAME_PROJECTS\n                );\n                if (featureConfigCampaignNameProjects) this.linksLabel = featureConfigCampaignNameProjects;\n\n                this.isStandAloneSearchEnabled = campaignMainConfig?.hasCncManager || campaignMainConfig?.hasProductDevManager;\n\n                const featureConfigNewCampaign = HelperService.translateConfigCampaignNameToLocalizationKey(\n                    campaignMainConfig?.campaignName as CampaignName, NewCampaign\n                );\n                if (featureConfigNewCampaign) this.newCampaignLabel = featureConfigNewCampaign;\n\n                this.isCriteriaForm1Enabled = campaignTimelineConfig?.criteriaForm === FeatureCriteriaForm.CRITERIA_FORM_TIMELINE_1;\n                this.isCriteriaForm2Enabled = campaignTimelineConfig?.criteriaForm === FeatureCriteriaForm.CRITERIA_FORM_TIMELINE_2;\n                this.isCriteriaFormTimelineSimplified1Enabled = campaignTimelineConfig?.criteriaForm === FeatureCriteriaForm.CRITERIA_FORM_TIMELINE_SIMPLIFIED_1;\n\n                this.hasCncManager = campaignMainConfig?.hasCncManager;\n                this.hasProductDevManager = campaignMainConfig?.hasProductDevManager;\n                this.hasActiveProduct = campaignMainConfig?.activeProduct;\n\n                this.isWorkspaceEnabled = response[FeatureTypes.FEA_WORKSPACE_MAIN]?.active;\n            }\n        });\n    }\n\n    ngAfterViewInit(): void {\n        this.setBreadcrumb();\n        this.themeService.updateContent({\n            searchPanel: this.searchPanel,\n            fullWidthContent: true,\n            standaloneSearch: this.isStandAloneSearchEnabled\n        });\n        // breadcrumb\n        if (!this.workspaceId) {\n            this.breadcrumbService.addCallbackForRouteRegex(CAMPAIGN_WORKSPACE_ROUTES.CAMPAIGN_DRIVE, () => {\n                return CAMPAIGN_WORKSPACE_COMPONENT_NAMES.DRIVE_CAMPAIGN;\n            });\n        } else {\n            this.breadcrumbService.addCallbackForRouteRegex(CAMPAIGN_WORKSPACE_ROUTES.CAMPAIGN_DRIVE, () => {\n                return this.timelineService.workspaceName;\n            });\n        }\n    }\n\n    parseTimestamp(timestamp: number): { year: number; day: number; month: number } {\n        const date = new Date(timestamp);\n        return {\n            year: date.getFullYear(),\n            day: date.getDate(),\n            month: date.getMonth() + 1,\n        };\n    }\n\n    getUsers() {\n        const brand = JSON.parse(localStorage.getItem(CAMPAIGN_WORKSPACE_CONSTANTS.WORKSPACE_LOCAL_STORAGE_KEYS.BRAND));\n        if (!brand?.id) {\n            return;\n        }\n        this.brandService.getProductDevManager(brand.id, this.workspaceId).pipe(\n            takeUntil(this.ngUnsubscribe)\n        ).subscribe({\n            next: (res: any) => {\n                this.productDevManagers = res;\n            }\n        });\n        this.brandService.getCnCManager(brand.id, this.workspaceId).pipe(\n            takeUntil(this.ngUnsubscribe)\n        ).subscribe({\n            next: (res: any) => {\n                this.cncManagers = res;\n            }\n        });\n    }\n\n    setBreadcrumb() {\n        const brand = JSON.parse(localStorage.getItem(CAMPAIGN_WORKSPACE_CONSTANTS.WORKSPACE_LOCAL_STORAGE_KEYS.BRAND));\n\n        if (this.isWidPresent) {\n\n            const pageLinks: MtmBreadcrumbLink[] = [{\n                label: brand?.name,\n                url: ['/']\n            }, {\n                label: CAMPAIGN_WORKSPACE_COMPONENT_NAMES.WORKSPACE,\n                url: [CAMPAIGN_WORKSPACE_ROUTES.WORKSPACES]\n            }, {\n                label: this.workspaceName\n            },]\n            this.mtmBreadcrumbService.setLinks(pageLinks);\n\n        } else {\n            const pageLinks: MtmBreadcrumbLink[] = [{\n                label: brand?.name,\n                url: ['/']\n            }, {\n                label: this.linksLabel\n            },]\n            this.mtmBreadcrumbService.setLinks(pageLinks);\n        }\n\n        this.googleAnalyticsService.sendUserAnalyticsConfig('', '', '');\n    }\n\n    getSideNavWorkspace() {\n        this.timelineService.selectedWorkspace.subscribe((wk: any) => {\n            if (wk && wk.id) {\n                this.timelineService.componentName.next({\n                    componentName: CAMPAIGN_WORKSPACE_COMPONENT_NAMES.CAMPAIGN_DRIVE_COMPONENT,\n                    bannerUrl: wk.coverUrl\n                });\n                this.workspaceId = wk.id;\n                this.timelineService.workspaceId = this.workspaceId;\n                this.getWorkspaceDriveCampaign();\n            }\n        })\n    }\n\n    ngOnDestroy(): void {\n        this.mtmBreadcrumbService.setLinks([]);\n        this.timelineService.workspaceName = this.workspaceName;\n        this.themeService.updateContent({\n            searchPanel: null,\n            standaloneSearch: null,\n            fullWidthContent: false\n        })\n        this.ngUnsubscribe.next(undefined);\n        this.ngUnsubscribe.complete();\n        this.subscription.unsubscribe();\n    }\n\n    getWorkspaceDriveCampaign() {\n        this.isLoaded = false;\n        this.isError = false;\n        this.DriveCampaigns = [];\n        this.hasNext = false;\n\n        this.campaignDriveService.fetchWorkspaceDriveCampaigns(\n            this.workspaceId,\n            this.isAll,\n            this.isArchived,\n            this.campaignSearchParams,\n            this.calendarViewDates,\n            this.pagingState,\n            this.firstInit,\n            this.months,\n            this.cacheBuster\n        ).subscribe({\n            next: (res) => {\n                this.years = res.years || this.years;\n                this.madMonthYear = res.madMonthYear || this.madMonthYear;\n                this.hasNext = res.hasNext;\n                this.pagingState = res.pagingState;\n                this.DriveCampaigns = res.DriveCampaigns;\n                this.backupDriveCampaigns = res.backupDriveCampaigns;\n                this.archiveDriveCampaigns = res.archiveDriveCampaigns;\n                this.archiveBackupDriveCampaigns = res.archiveBackupDriveCampaigns;\n\n                this.setCampaignPermissions();\n                this.getFavoriteDriveCampaigns();\n\n                if (this.firstInit) {\n                    this.setYearSelected();\n                    this.generateMadLabel();\n                    this.firstInit = false;\n                }\n\n                this.isLoaded = true;\n            },\n            error: (err) => {\n                console.error('error', err);\n                this.isError = true;\n                this.isLoaded = false;\n            }\n        });\n\n    }\n\n    setCampaignPermissions() {\n        this.DriveCampaigns.map(d => {\n            if (d.cncManager?.length || d.projectLeaders?.length) {\n                d.locked = !(this.permissionService.hasAuthority(Authority.Z, null) || this.permissionService.hasAuthority(Authority.S, null) || d.cncManager?.find(c => c == this.authUser.username) || d.projectLeaders?.find(l => l == this.authUser.username));\n            } else {\n                d.locked = !(this.permissionService.hasAuthority(Authority.Z, null) || this.permissionService.hasAuthority(Authority.S, null));\n            }\n        })\n    }\n\n    searchDriveCampaigns() {\n        if (!this.isLoaded) {\n            return;\n        }\n\n        this.isLoaded = false;\n        setTimeout(() => {\n            this.DriveCampaigns = this.campaignDriveService.searchDriveCampaigns(\n                this.searchDriveCampaign,\n                this.backupDriveCampaigns\n            );\n\n            this.filterCampaignByBrandWorkspace();\n            this.isLoaded = true;\n        }, 100);\n\n    }\n\n    createCampaignDrive(e) {\n        e.stopImmediatePropagation();\n        this.projectV2Service.driveCoordinatorMilestone = undefined;\n        this.projectV2Service.timelineId = null;\n        this.projectV2Service.updateFormData({}, {})\n        this.router.navigate([`workspaces/campaigndrive/${this.workspaceId}/general`]);\n        this.timelineService.isDriveNav.emit(false);\n    }\n\n    redirectToDashboard(drive) {\n        this.timelineService.componentName.next({\n            componentName: CAMPAIGN_WORKSPACE_COMPONENT_NAMES.CAMPAIGN_DRIVE_COMPONENT,\n            bannerUrl: drive.banner\n        })\n        if (!this.authService.hasPaidSubscription()) {\n            return;\n        }\n        this.timelineService.lastSelectedDriveCampaign = drive;\n        this.projectV2Service.driveCoordinatorMilestone = undefined;\n        const path = CAMPAIGN_WORKSPACE_ROUTES.CAMPAIGN_DRIVE_DASHBOARD;\n        this.router.navigate([path], {\n            queryParams: {\n                wid: this.cryptoService.encryptString(drive.workspaceId),\n                dc: this.cryptoService.encryptString(drive.id),\n            }\n        });\n        //reset stored milestone\n        this.timelineService.updateMilestone({});\n\n    }\n\n    gotoWorkspace(project) {\n        if (!this.isWorkspaceEnabled) {\n            return;\n        }\n        this.router.navigateByUrl(CAMPAIGN_WORKSPACE_ROUTES.TEMPORARY_REDIRECT, { skipLocationChange: true }).then(() => {\n            this.router.navigate([CAMPAIGN_WORKSPACE_ROUTES.CAMPAIGN_DRIVE],\n                {\n                    queryParams: {\n                        wid: this.cryptoService.encryptString(project?.workspaceId),\n                    }\n                });\n        });\n    }\n\n    editCampaignDrive(drive) {\n        this.projectV2Service.updateSelectedDriveCampaign(drive.workspaceId, drive.id);\n    }\n\n    // set profile picture as a name of company if image is not available\n    private setProfilePicture(currentUser) {\n        let fullName = currentUser.fullName ? _.get(currentUser, FullName, '') : _.get(currentUser, FirstName, '') + ' ' + _.get(currentUser, LastName, '');\n        let nameArr = fullName.toLowerCase().split(' ');\n        if (nameArr.length > 0 && !HelperService.isObjectEmpty(nameArr[0][0])) {\n            this.initialName = nameArr[0][0];\n            if (nameArr.length > 1 && !HelperService.isObjectEmpty(nameArr[1][0])) {\n                this.initialName += nameArr[1][0];\n            } else {\n                this.initialName += nameArr[0][1];\n            }\n            this.nameColor = this.stringToHslColor(this.initialName);\n            this.blobPicture = _.get(currentUser, BlobPicture) ? void 0 : currentUser.blobPicture;\n        }\n    }\n\n    reloadProfilePicture() {\n        this.usersLoaded = false;\n        this.usersList[this.username] = void 0;\n    }\n\n    stringToHslColor(initial: any = []) {\n        let hash = 0;\n        if (!initial) {\n            return;\n        }\n        for (let i = 0; i < initial.length; i++) {\n            hash = initial.charCodeAt(i) + ((hash << 5) - hash);\n        }\n        let h = hash % 360;\n        return 'hsl(' + h + ', 75%, 62%)';\n    }\n\n    changeDriveCampaignStatus(item, status) {\n        this.dropdownProjectStatus.close();\n        item.status = status;\n        this.projectV2Service.updateDriveCampaign(item)\n            .subscribe(() => {\n            });\n    }\n\n    changeDriveCampaignActiveProduct(item, activeProduct) {\n        item.activeProduct = activeProduct;\n        this.projectV2Service.updateDriveCampaign(item)\n            .subscribe(() => { });\n    }\n\n\n    deleteDriveCampaign(item) {\n        this.campaignDriveService.deleteDriveCampaign(item).subscribe({\n            next: () => {\n                this.DriveCampaigns = this.DriveCampaigns.filter(d => d.id !== item.id);\n            },\n            error: err => {\n                console.error('Delete failed', err);\n            }\n        });\n    }\n\n    getWorkspaces() {\n        this.workspaceService.getWorkspaces(this.workspaceId, this.isStandAloneSearchEnabled).subscribe({\n            next: ({ workspaces, userBrands }) => {\n                this.workspaces = workspaces;\n                this.userBrands = userBrands;\n                this.getUsers();\n            },\n            error: (err) => console.error('Error fetching workspaces:', err)\n        });\n    }\n\n    markAsFavorite(driveCampaign) {\n        this.analyticService.markAsFavorite(driveCampaign, DriveCampaignEvent).pipe(\n            takeUntil(this.ngUnsubscribe)\n        ).subscribe({\n            next: (res: any) => {\n                this.DriveCampaigns = this.DriveCampaigns.map(dc => ({\n                    ...dc,\n                    isFavorite: res.items.includes(dc.id)\n                }));\n            },\n            error: (err) => {\n                driveCampaign.isFavorite = false;\n                console.error(err)\n            },\n            complete: () => {\n\n            }\n        });\n    }\n\n    removeFavorite(driveCampaign) {\n        this.analyticService.removeAsFavorite(driveCampaign, DriveCampaignEvent).pipe(\n            takeUntil(this.ngUnsubscribe)\n        ).subscribe({\n            next: () => {\n                this.getWorkspaceDriveCampaign();\n            },\n            error: (err) => {\n                console.error(err)\n            },\n            complete: () => {\n            }\n        });\n    }\n\n    selectCalendarMode(mode: string) {\n        const { dates, viewMode } = this.campaignDriveService.selectCalendarMode(mode);\n\n        this.calendarViewDates = dates;\n        this.calendarViewMode = viewMode;\n\n        EmitterService.get(CalendarFilterUpdatedEvent).emit(this.calendarViewDates);\n        this.getWorkspaceDriveCampaign();\n    }\n\n\n    getFavoriteDriveCampaigns() {\n        this.isError = false;\n        this.isLoaded = false;\n        this.DriveCampaigns = [];\n        this.backupDriveCampaigns = [];\n\n        this.campaignDriveService.getFavoriteDriveCampaigns(this.campaignSearchParams, this.workspaceId, {\n            isFav: this.isFav,\n            isAll: this.isAll,\n            isArchived: this.isArchived,\n            sortBy: this.sortBy,\n            favDriveCampaigns: this.favDriveCampaigns,\n            favbackupDriveCampaigns: this.favbackupDriveCampaigns,\n            archiveDriveCampaigns: this.archiveDriveCampaigns,\n            archiveBackupDriveCampaigns: this.archiveBackupDriveCampaigns,\n            cacheBuster: this.cacheBuster\n        }).subscribe({\n            next: ({ DriveCampaigns, backupDriveCampaigns }) => {\n                this.DriveCampaigns = DriveCampaigns;\n                this.backupDriveCampaigns = backupDriveCampaigns;\n                this.isLoaded = true;\n\n                if (this.searchDriveCampaign) this.searchDriveCampaigns();\n                this.filterCampaignByBrandWorkspace();\n            },\n            error: () => {\n                this.isError = true;\n            }\n        });\n    }\n\n    filterCampaignByBrandWorkspace() {\n        const brand = JSON.parse(localStorage.getItem(CAMPAIGN_WORKSPACE_CONSTANTS.WORKSPACE_LOCAL_STORAGE_KEYS.BRAND));\n        if (!brand) {\n            return;\n        }\n        this.DriveCampaigns = this.DriveCampaigns.filter(w => {\n            return !!brand.workspaces.find(bw => bw.id == w.workspaceId);\n        });\n    }\n\n    archiveDriveCampaign(item) {\n        item.isArchiving = true;\n        const originalArchivedState = item.archived;\n        const targetArchivedState = !item.archived;\n\n        this.projectV2Service.updateDriveCampaign({ ...item, archived: targetArchivedState }).pipe(\n            takeUntil(this.ngUnsubscribe)\n        ).subscribe({\n            next: () => {\n                item.archived = targetArchivedState;\n                item.isArchiving = false;\n                this.DriveCampaigns = this.DriveCampaigns.filter(drive => drive.id != item.id);\n            },\n            error: (err) => {\n                item.archived = originalArchivedState;\n                item.isArchiving = false;\n                this.overlayService.showError(this.translatePipe.transform(err.errorCode, ErrorValue));\n            }\n        });\n    }\n\n    loadMore(check: boolean) {\n        if (!check || !this.hasNext) {\n            return;\n        }\n    }\n\n    allItems() {\n        this.isArchived = false;\n        this.isFavorites = false;\n        this.isFav = false;\n        this.isAll = true;\n        this.getWorkspaceDriveCampaign();\n\n    }\n\n    favoriteItems() {\n        this.isArchived = false;\n        this.isFavorites = true;\n        this.isFav = true;\n        this.isAll = false;\n        this.getFavoriteDriveCampaigns();\n    }\n\n    getArchiveCampaign() {\n        this.isArchived = true;\n        this.isFavorites = false;\n        this.isFav = false;\n        this.isAll = false;\n        this.getWorkspaceDriveCampaign();\n    }\n\n    allProjectItems() {\n        this.isArchivedProject = false;\n        this.isFavoritesProject = false;\n        this.isAllProject = true;\n        this.timelineService.emitIsAll(true);\n    }\n\n    favoriteProjectItems() {\n        this.isArchivedProject = false;\n        this.isFavoritesProject = true;\n        this.isAllProject = false;\n        this.timelineService.emitIsFavorites(true);\n    }\n\n    getArchiveProjects() {\n        this.isArchivedProject = true;\n        this.isFavoritesProject = false;\n        this.isAllProject = false;\n        this.timelineService.emitIsArchived(true);\n    }\n\n    createProject() {\n        const queryParams = this.workspaceId ? { workspaceId: this.workspaceId } : {};\n        this.router.navigate([CAMPAIGN_WORKSPACE_ROUTES.NEW_COMPANY_PROJECTS], { queryParams });\n    }\n\n    handleItemsScroll() {\n        if (!this.settingsDropdown) {\n            return;\n        }\n        this.settingsDropdown.forEach((dropdown: NgbDropdown) => {\n            if (dropdown.isOpen()) {\n                dropdown.close();\n            }\n        });\n    }\n\n    selectProductDevOwner(username: string) {\n        const updated = this.campaignDriveFilterService.toggleProductDevOwner(\n            username,\n            this.campaignSearchParams,\n            this.productDevManagers\n        );\n\n        this.campaignSearchParams = updated.campaignSearchParams;\n        this.allProductDevManagerSelected = updated.allProductDevManagerSelected;\n\n        this.getWorkspaceDriveCampaign();\n    }\n\n    selectCnCManager(username: string) {\n        const updated = this.campaignDriveFilterService.toggleCnCManager(\n            username,\n            this.campaignSearchParams,\n            this.cncManagers\n        );\n\n        this.campaignSearchParams = updated.campaignSearchParams;\n        this.allCnCManagerSelected = updated.allCnCManagerSelected;\n\n        this.getWorkspaceDriveCampaign();\n    }\n\n    setActiveProduct(value: string) {\n        this.campaignSearchParams = this.campaignDriveFilterService.toggleActiveProduct(\n            value,\n            this.campaignSearchParams\n        );\n\n        this.getWorkspaceDriveCampaign();\n    }\n\n    selectAllProductDevManager(e: any) {\n        const updated = this.campaignDriveFilterService.selectAllProductDevManager(\n            e,\n            this.allProductDevManagerSelected,\n            this.campaignSearchParams,\n            this.productDevManagers\n        );\n\n        this.allProductDevManagerSelected = updated.allProductDevManagerSelected;\n        this.campaignSearchParams = updated.campaignSearchParams;\n\n        this.getWorkspaceDriveCampaign();\n    }\n\n    selectAllCnCManager(e: any) {\n        const updated = this.campaignDriveFilterService.selectAllCnCManager(\n            e,\n            this.allCnCManagerSelected,\n            this.campaignSearchParams,\n            this.cncManagers\n        );\n\n        this.allCnCManagerSelected = updated.allCnCManagerSelected;\n        this.campaignSearchParams = updated.campaignSearchParams;\n\n        this.getWorkspaceDriveCampaign();\n    }\n\n\n    selectAllMad(e: any) {\n        const updated = this.campaignDriveFilterService.selectAllMad(\n            e,\n            this.allMadSelected,\n            this.campaignSearchParams,\n            this.years,\n            this.months,\n            this.madMonthYear,\n            this.yearSelected\n        );\n\n        this.allMadSelected = updated.allMadSelected;\n        this.campaignSearchParams = updated.campaignSearchParams;\n        this.madMonthYear = updated.madMonthYear;\n        this.yearSelected = updated.yearSelected;\n\n        this.getWorkspaceDriveCampaign();\n        this.generateMadLabel();\n    }\n\n    selectYear(e: any, year: number) {\n        const updated = this.campaignDriveFilterService.selectYear(\n            e,\n            year,\n            this.months,\n            this.campaignSearchParams,\n            this.madMonthYear,\n            this.yearSelected\n        );\n\n        this.campaignSearchParams = updated.campaignSearchParams;\n        this.madMonthYear = updated.madMonthYear;\n        this.yearSelected = updated.yearSelected;\n\n        this.getWorkspaceDriveCampaign();\n        this.generateMadLabel();\n\n    }\n\n    monthSelected(e: any, year: number, month: string) {\n        const updated = this.campaignDriveFilterService.monthSelected(\n            e,\n            year,\n            month,\n            this.months,\n            this.campaignSearchParams,\n            this.madMonthYear,\n            this.yearSelected\n        );\n\n        this.campaignSearchParams = updated.campaignSearchParams;\n        this.madMonthYear = updated.madMonthYear;\n        this.yearSelected = updated.yearSelected;\n\n        this.getWorkspaceDriveCampaign();\n        this.generateMadLabel();\n    }\n\n    generateMadLabel() {\n        this.campaignDriveFilterService.madMonthYear = this.madMonthYear;\n        this.madLabel = this.campaignDriveFilterService.generateMadLabel(\n            this.years,\n            this.months,\n            this.translatePipe\n        );\n    }\n\n    goToSimulator() {\n        this.router.navigate([CAMPAIGN_WORKSPACE_ROUTES.TIMELINE_SIMULATOR],);\n    }\n}"
          }
        ]
      }
    ]
  },
  "online_content_time": "2025-08-20T06:22:38.106Z"
}